import os
import json
import base64
import logging
import asyncio
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
)

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
Telegram_Token = os.getenv("Telegram_Token")
GOOGLE_CREDENTIALS_B64 = os.getenv("GOOGLE_CREDENTIALS_B64")
SPREADSHEET_ID = "1qjVJZUqm1hT5IkrASq-_iL9cc4wDl8fdjvd7KDMWL-U"

# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
def get_gspread_client():
    creds_json = base64.b64decode(GOOGLE_CREDENTIALS_B64).decode("utf-8")
    creds_dict = json.loads(creds_json)
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)

# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
def get_data():
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        rows = sheet.get_all_values()
        return {row[0].strip(): row[1].strip() for row in rows if len(row) >= 2}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

# üîÅ –¶–∏–∫–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async def auto_update(bot, chat_id, message_id):
    while True:
        try:
            data = get_data()
            text = (
                f"üíº –ë–∞–ª–∞–Ω—Å: {data.get('–ë–∞–ª–∞–Ω—Å', '‚Äî')}\n"
                f"üí≥ –ö–∞—Ä—Ç–∞: {data.get('–ö–∞—Ä—Ç–∞', '‚Äî')}\n"
                f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {data.get('–ù–∞–ª–∏—á–Ω—ã–µ', '‚Äî')}"
            )
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await asyncio.sleep(5)

# ‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞...")
    chat_id = message.chat_id
    message_id = message.message_id
    asyncio.create_task(auto_update(context.bot, chat_id, message_id))

# üß† –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    if not Telegram_Token or not GOOGLE_CREDENTIALS_B64:
        raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    app = ApplicationBuilder().token(Telegram_Token).build()
    app.add_handler(CommandHandler("start", start))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
