import os
import json
import base64
import logging
import gspread
import datetime
import re
import asyncio

DATE_FMT = "%d.%m.%Y %H:%M"  # –∫–∞–∫ –ø–∏—à–µ–º –≤ –ª–∏—Å—Ç—ã

def _parse_dt_safe(s: str):
    """–ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú' –∏–ª–∏ '–î–î.–ú–ú.–ì–ì–ì–ì'. –í–æ–∑–≤—Ä–∞—â–∞–µ–º datetime –∏–ª–∏ None."""
    s = (s or "").strip()
    for fmt in (DATE_FMT, "%d.%m.%Y"):
        try:
            return datetime.datetime.strptime(s, fmt)
        except ValueError:
            pass
    return None

# === Dynamic Categories & Records ===
from typing import Optional, List, Dict, Tuple, Union

INCOME_SHEET = "–î–æ—Ö–æ–¥"    # –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–ª –ª–∏—Å—Ç –∏–Ω–∞—á–µ ‚Äî –ø–æ–º–µ–Ω—è–π —Ç—É—Ç
EXPENSE_SHEET = "–†–∞—Å—Ö–æ–¥"  # –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–ª –ª–∏—Å—Ç –∏–Ω–∞—á–µ ‚Äî –ø–æ–º–µ–Ω—è–π —Ç—É—Ç

def get_cats_ws(client):
    return client.open_by_key(SPREADSHEET_ID).worksheet("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
def _parse_money(s: str) -> float:
    s = (s or "").strip().replace(",", ".")
    return float(s) if s else 0.0

def list_categories(kind: str):
    """–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ('–î–æ—Ö–æ–¥'/'–†–∞—Å—Ö–æ–¥') -> [{ID, –ù–∞–∑–≤–∞–Ω–∏–µ, –ü–æ—Ä—è–¥–æ–∫}]"""
    client = get_gspread_client()
    ws = get_cats_ws(client)
    rows = ws.get_all_values()
    if not rows or len(rows) < 2:
        return []
    header = rows[0]
    idx = {h.strip(): i for i, h in enumerate(header)}
    out = []
    for r in rows[1:]:
        if not r: 
            continue
        if not all(k in idx for k in ("ID","–¢–∏–ø","–ù–∞–∑–≤–∞–Ω–∏–µ","–ê–∫—Ç–∏–≤–Ω–∞")):
            continue
        if any(idx[k] >= len(r) for k in ("ID","–¢–∏–ø","–ù–∞–∑–≤–∞–Ω–∏–µ","–ê–∫—Ç–∏–≤–Ω–∞")):
            continue
        if r[idx["–¢–∏–ø"]].strip() != kind:
            continue
        if r[idx["–ê–∫—Ç–∏–≤–Ω–∞"]].strip() != "1":
            continue
        order = 0
        if "–ü–æ—Ä—è–¥–æ–∫" in idx and idx["–ü–æ—Ä—è–¥–æ–∫"] < len(r):
            s = (r[idx["–ü–æ—Ä—è–¥–æ–∫"]] or "").strip()
            if s and s.lstrip("-").isdigit():
                order = int(s)
        out.append({"ID": r[idx["ID"]].strip(), "–ù–∞–∑–≤–∞–Ω–∏–µ": r[idx["–ù–∞–∑–≤–∞–Ω–∏–µ"]].strip(), "–ü–æ—Ä—è–¥–æ–∫": order})
    out.sort(key=lambda x: (x["–ü–æ—Ä—è–¥–æ–∫"], x["–ù–∞–∑–≤–∞–Ω–∏–µ"].lower()))
    return out

def _sum_sheet_period(client, sheet_name: str, days: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (total_card, total_cash, rows_filtered)
    rows_filtered ‚Äî —Å—Ç—Ä–æ–∫–∏, –ø–æ–ø–∞–≤—à–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ –¥–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π).
    –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫: [–î–∞—Ç–∞, –ö–∞—ÇID, –ö–∞—Ç, üí≥, üíµ, üìù]
    """
    ws = client.open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
    rows = ws.get_all_values()[1:]
    now = datetime.datetime.now()
    start_date = now - datetime.timedelta(days=days)

    total_card = Decimal("0")
    total_cash = Decimal("0")
    filtered = []

    for r in rows:
        if not r:
            continue
        dt = _parse_dt_safe(r[0] if len(r) > 0 else "")
        if not dt or dt < start_date:
            continue

        card = _to_amount(r[3] if len(r) > 3 else "")
        cash = _to_amount(r[4] if len(r) > 4 else "")
        total_card += card
        total_cash += cash
        filtered.append(r)

    return total_card, total_cash, filtered


def _render_detail_line(r: list, is_income: bool) -> str:
    dt   = r[0] if len(r) > 0 else ""
    cat  = r[2] if len(r) > 2 else "-"
    card = r[3] if len(r) > 3 else ""
    cash = r[4] if len(r) > 4 else ""
    desc = r[5] if len(r) > 5 else "-"
    total = _to_amount(card) + _to_amount(cash)

    if is_income:
        return f"üìÖ {dt} | üöó {cat} | üü¢ {_fmt_amount(total)} (üí≥ {card or '0'} | üíµ {cash or '0'}) | üìù {desc}"
    else:
        return f"üìÖ {dt} | üöó {cat} | üî¥ -{_fmt_amount(total)} (üí≥ {card or '0'} | üíµ {cash or '0'}) | üìù {desc}"    

def get_category_name(cat_id: str) -> str:
    client = get_gspread_client()
    ws = get_cats_ws(client)
    rows = ws.get_all_values()
    if not rows: 
        return cat_id
    header = rows[0]
    idx = {h.strip(): i for i, h in enumerate(header)}
    if "ID" not in idx:
        return cat_id
    for r in rows[1:]:
        if idx["ID"] < len(r) and (r[idx["ID"]] or "").strip() == cat_id:
            if "–ù–∞–∑–≤–∞–Ω–∏–µ" in idx and idx["–ù–∞–∑–≤–∞–Ω–∏–µ"] < len(r):
                nm = (r[idx["–ù–∞–∑–≤–∞–Ω–∏–µ"]] or "").strip()
                return nm or cat_id
            return cat_id
    return cat_id

def add_category(kind: str, name: str) -> str:
    """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ê–∫—Ç–∏–≤–Ω–∞=1, –ü–æ—Ä—è–¥–æ–∫=0). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç cat_id."""
    client = get_gspread_client()
    ws = get_cats_ws(client)
    rows = ws.get_all_values()
    if not rows:
        ws.append_row(["ID","–¢–∏–ø","–ù–∞–∑–≤–∞–Ω–∏–µ","–ê–∫—Ç–∏–≤–Ω–∞","–ü–æ—Ä—è–¥–æ–∫"])
    cat_id = "cat_" + datetime.now().strftime("%Y%m%d_%H%M%S")
    ws.append_row([cat_id, kind.strip(), name.strip(), "1", "0"])
    return cat_id

def ensure_default_category(kind: str) -> tuple[str, str]:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–î—Ä—É–≥–æ–µ' –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
    cats = list_categories(kind)
    for c in cats:
        if c["–ù–∞–∑–≤–∞–Ω–∏–µ"].strip().lower() == "–¥—Ä—É–≥–æ–µ":
            return c["ID"], c["–ù–∞–∑–≤–∞–Ω–∏–µ"]
    cat_id = add_category(kind, "–î—Ä—É–≥–æ–µ")
    return cat_id, "–î—Ä—É–≥–æ–µ"

# ---- –ª–∏—Å—Ç—ã –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥ —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏: –î–∞—Ç–∞ | –ö–∞—Ç–µ–≥–æ—Ä–∏—èID | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | üí≥ –ö–∞—Ä—Ç–∞ | üíµ –ù–∞–ª–∏—á–Ω—ã–µ | üìù –û–ø–∏—Å–∞–Ω–∏–µ
INOUT_HEADERS = ["–î–∞—Ç–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—èID", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "üí≥ –ö–∞—Ä—Ç–∞", "üíµ –ù–∞–ª–∏—á–Ω—ã–µ", "üìù –û–ø–∏—Å–∞–Ω–∏–µ"]

def ensure_sheet_headers(ws, headers: list[str]):
    rows = ws.get_all_values()
    if not rows:
        ws.append_row(headers)

def _fmt_amount(x): return f"{float(x):.2f}"

def append_income(category_id: str, category_name: str, card_amount: float, cash_amount: float, desc: str):
    client = get_gspread_client()
    ws = client.open_by_key(SPREADSHEET_ID).worksheet(INCOME_SHEET)
    ensure_sheet_headers(ws, INOUT_HEADERS)
    ws.append_row([
        datetime.now().strftime("%d.%m.%Y %H:%M"),
        category_id, category_name, _fmt_amount(card_amount), _fmt_amount(cash_amount), desc or "-",
    ])

def append_expense(category_id: str, category_name: str, card_amount: float, cash_amount: float, desc: str):
    client = get_gspread_client()
    ws = client.open_by_key(SPREADSHEET_ID).worksheet(EXPENSE_SHEET)
    ensure_sheet_headers(ws, INOUT_HEADERS)
    ws.append_row([
        datetime.now().strftime("%d.%m.%Y %H:%M"),
        category_id, category_name, _fmt_amount(card_amount), _fmt_amount(cash_amount), desc or "-",
    ])
def _parse_date_flex(s: str) -> Optional[datetime.date]:
    """–ü–∞—Ä—Å–∏—Ç '–î–î.–ú–ú.–ì–ì–ì–ì' –∏–ª–∏ '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú'. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç date –∏–ª–∏ None."""
    if not s:
        return None
    s = s.strip()
    for fmt in ("%d.%m.%Y %H:%M", "%d.%m.%Y"):
        try:
            return datetime.datetime.strptime(s, fmt).date()
        except ValueError:
            pass
    return None   

def _days_left_label(date_str: str) -> tuple[str, int | None]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∫—É '–æ—Å—Ç–∞–ª–æ—Å—å N –¥–Ω–µ–π' / '—Å–µ–≥–æ–¥–Ω—è' / '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ N –¥–Ω–µ–π' –∏ —Å–∞–º N (–º–æ–∂–µ—Ç –±—ã—Ç—å <0),
    –ª–∏–±–æ ('‚Äî', None) –µ—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ—Ç, –ª–∏–±–æ ('–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç', None) –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏.
    """
    if not date_str:
        return "‚Äî", None
    d = _parse_date_flex(date_str)
    if not d:
        return "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", None
    today = datetime.date.today()
    delta = (d - today).days
    if delta > 0:
        return f"–æ—Å—Ç–∞–ª–æ—Å—å {delta} –¥–Ω–µ–π", delta
    elif delta == 0:
        return "—Å–µ–≥–æ–¥–Ω—è", 0
    else:
        return f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {abs(delta)} –¥–Ω–µ–π", delta

def _ensure_column(ws, header_name: str) -> int:
    """–í–µ—Ä–Ω—ë—Ç –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é —Å–ø—Ä–∞–≤–∞ –∏ –≤–µ—Ä–Ω—ë—Ç –µ—ë –∏–Ω–¥–µ–∫—Å."""
    header = ws.row_values(1)
    if header_name in header:
        return header.index(header_name) + 1
    col = len(header) + 1
    ws.update_cell(1, col, header_name)
    return col

def _find_row_by_name(ws, name: str, name_header: str = "–ù–∞–∑–≤–∞–Ω–∏–µ") -> int | None:
    """–í–µ—Ä–Ω—ë—Ç –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ (2..N) –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∞–≤—Ç–æ, –∏–Ω–∞—á–µ None."""
    rows = ws.get_all_values()
    if not rows:
        return None
    header = rows[0]
    try:
        name_idx = header.index(name_header)
    except ValueError:
        return None
    for i, r in enumerate(rows[1:], start=2):
        if name_idx < len(r) and r[name_idx].strip() == name.strip():
            return i
    return None

def _find_row_by_id(ws, car_id: str) -> int | None:
    """–í–µ—Ä–Ω—ë—Ç –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ (2..N) –ø–æ ID (–ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü), –∏–Ω–∞—á–µ None."""
    rows = ws.get_all_values()
    if not rows:
        return None
    for i, r in enumerate(rows[1:], start=2):
        if r and r[0].strip() == car_id.strip():
            return i
    return None

def _format_date_with_days(date_str: str) -> str:
    """
    "–î–î.–ú–ú.–ì–ì–ì–ì" –∏–ª–∏ "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú" -> "–î–î.–ú–ú.–ì–ì–ì–ì (N –¥–Ω–µ–π)"
    –ü—É—Å—Ç–æ -> "‚Äî", –æ—à–∏–±–∫–∏ -> "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç".
    """
    if not date_str:
        return "‚Äî"
    s = date_str.strip()
    try:
        try:
            dt = datetime.datetime.strptime(s, "%d.%m.%Y %H:%M")
        except ValueError:
            dt = datetime.datetime.strptime(s, "%d.%m.%Y")
        d = dt.date()
        today = datetime.date.today()
        delta = (d - today).days
        if delta > 0:
            tail = f"({delta} –¥–Ω–µ–π)"
        elif delta == 0:
            tail = "(—Å–µ–≥–æ–¥–Ω—è)"
        else:
            tail = f"(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {abs(delta)} –¥–Ω–µ–π)"
        return f"{d.strftime('%d.%m.%Y')} {tail}"
    except Exception:
        return "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"


from decimal import Decimal, ROUND_HALF_UP

from oauth2client.service_account import ServiceAccountCredentials

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

Telegram_Token = os.getenv("Telegram_Token")
REMINDER_CHAT_ID = -1002522776417
GOOGLE_CREDENTIALS_B64 = os.getenv("GOOGLE_CREDENTIALS_B64")
SPREADSHEET_ID = "1qjVJZUqm1hT5IkrASq-_iL9cc4wDl8fdjvd7KDMWL-U"

INITIAL_BALANCE = Decimal("21263.99")  # üèÅ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞


def get_gspread_client():
    creds_json = base64.b64decode(GOOGLE_CREDENTIALS_B64).decode("utf-8")
    creds_dict = json.loads(creds_json)
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)


def get_data():
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–°–≤–æ–¥–∫–∞")
        rows = sheet.get_all_values()
        return {row[0].strip(): row[1].strip() for row in rows if len(row) >= 2}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}


def _to_amount(val):
    s = str(val) if val is not None else "0"
    s = s.replace(" ", "").replace(",", ".")
    try:
        return Decimal(s)
    except Exception:
        return Decimal("0")


def _fmt_amount(val):
    if not isinstance(val, Decimal):
        val = _to_amount(val)
    # format with thousands sep and 2 decimals
    return format(val.quantize(Decimal("0.01")), ",.2f")


def compute_balance(client):
    """
    –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–ª–∏—Å—Ç '–°–≤–æ–¥–∫–∞' –∏ –∑–∞–ø–∏—Å–∏ –≤ –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥):
    - –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥: [–î–∞—Ç–∞, –ö–∞—ÇID, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, üí≥ D, üíµ E, üìù]
    - –ù–∞–ª–∏—á–Ω—ã–µ = SUM(–î–æ—Ö–æ–¥!E) - SUM(–†–∞—Å—Ö–æ–¥!E)
    - –ö–∞—Ä—Ç–∞     = INITIAL_BALANCE + SUM(–î–æ—Ö–æ–¥!D) - SUM(–†–∞—Å—Ö–æ–¥!D)
    - –ë–∞–ª–∞–Ω—Å    = –ö–∞—Ä—Ç–∞ + –ù–∞–ª–∏—á–Ω—ã–µ
    """
    income_ws = client.open_by_key(SPREADSHEET_ID).worksheet("–î–æ—Ö–æ–¥")
    expense_ws = client.open_by_key(SPREADSHEET_ID).worksheet("–†–∞—Å—Ö–æ–¥")

    income_rows = income_ws.get_all_values()[1:]
    expense_rows = expense_ws.get_all_values()[1:]

    income_card = Decimal("0")
    income_cash = Decimal("0")
    for r in income_rows:
        if len(r) > 3: income_card += _to_amount(r[3])  # üí≥ D
        if len(r) > 4: income_cash += _to_amount(r[4])  # üíµ E

    expense_card = Decimal("0")
    expense_cash = Decimal("0")
    for r in expense_rows:
        if len(r) > 3: expense_card += _to_amount(r[3])  # üí≥ D
        if len(r) > 4: expense_cash += _to_amount(r[4])  # üíµ E

    cash  = income_cash - expense_cash
    card  = INITIAL_BALANCE + income_card - expense_card
    total = card + cash

    return {"–ë–∞–ª–∞–Ω—Å": total, "–ö–∞—Ä—Ç–∞": card, "–ù–∞–ª–∏—á–Ω—ã–µ": cash}

def compute_summary(client):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞–∫ –≤ '–°–≤–æ–¥–∫–∞' –ø–æ–¥ –ù–û–í–´–ô —Ñ–æ—Ä–º–∞—Ç:
    - –î–æ—Ö–æ–¥ = SUM(–î–æ—Ö–æ–¥!D:E)
    - –†–∞—Å—Ö–æ–¥ = SUM(–†–∞—Å—Ö–æ–¥!D:E)
    - –ù–∞–ª–∏—á–Ω—ã–µ = SUM(–î–æ—Ö–æ–¥!E) - SUM(–†–∞—Å—Ö–æ–¥!E)
    - –ö–∞—Ä—Ç–∞ = INITIAL_BALANCE + SUM(–î–æ—Ö–æ–¥!D) - SUM(–†–∞—Å—Ö–æ–¥!D)
    - –ë–∞–ª–∞–Ω—Å = –ö–∞—Ä—Ç–∞ + –ù–∞–ª–∏—á–Ω—ã–µ
    - –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ = –î–æ—Ö–æ–¥ - –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞  (–∫–∞–∫ —É —Ç–µ–±—è)
    """
    income_ws = client.open_by_key(SPREADSHEET_ID).worksheet("–î–æ—Ö–æ–¥")
    expense_ws = client.open_by_key(SPREADSHEET_ID).worksheet("–†–∞—Å—Ö–æ–¥")

    income_rows = income_ws.get_all_values()[1:]
    expense_rows = expense_ws.get_all_values()[1:]

    income_card = Decimal("0")
    income_cash = Decimal("0")
    for r in income_rows:
        if len(r) > 3: income_card += _to_amount(r[3])  # üí≥ D
        if len(r) > 4: income_cash += _to_amount(r[4])  # üíµ E

    expense_card = Decimal("0")
    expense_cash = Decimal("0")
    for r in expense_rows:
        if len(r) > 3: expense_card += _to_amount(r[3])  # üí≥ D
        if len(r) > 4: expense_cash += _to_amount(r[4])  # üíµ E

    income_total  = income_card + income_cash
    expense_total = expense_card + expense_cash

    cash  = income_cash - expense_cash
    card  = INITIAL_BALANCE + income_card - expense_card
    balance = card + cash
    earned  = income_total - INITIAL_BALANCE

    return {
        "–ù–∞—á–∞–ª—å–Ω–∞—è": INITIAL_BALANCE,
        "–î–æ—Ö–æ–¥": income_total,
        "–†–∞—Å—Ö–æ–¥": expense_total,
        "–ù–∞–ª–∏—á–Ω—ã–µ": cash,
        "–ö–∞—Ä—Ç–∞": card,
        "–ë–∞–ª–∞–Ω—Å": balance,
        "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ": earned,
    }

# –°—Ç–∞—Ç–∏—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é" –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
def persistent_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[["–ú–µ–Ω—é"]],
        resize_keyboard=True,
        one_time_keyboard=False,
    )

async def _show_categories_view(query, kind: str):
    cats = list_categories(kind)
    if not cats:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"cat_add|{kind}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
        ])
        await query.edit_message_text(f"–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {kind.lower()}–∞.", reply_markup=kb)
        return
    cbp = "income_cat" if kind == "–î–æ—Ö–æ–¥" else "expense_cat"
    buttons = [[InlineKeyboardButton(c["–ù–∞–∑–≤–∞–Ω–∏–µ"], callback_data=f"{cbp}|{c['ID']}")] for c in cats]
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"cat_add|{kind}")])
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")])
    await query.edit_message_text(
        f"{'üì•' if kind=='–î–æ—Ö–æ–¥' else 'üì§'} –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ {kind.lower()}:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é (inline –∫–Ω–æ–ø–∫–∏) –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inline_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
    [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="income"),
     InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="expense")],
    [InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–≤–æ–¥", callback_data="transfer"),
     InlineKeyboardButton("üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏", callback_data="cars")],
    [InlineKeyboardButton("üìà –û—Ç—á—ë—Ç 7 –¥–Ω–µ–π", callback_data="report_7"),
     InlineKeyboardButton("üìä –û—Ç—á—ë—Ç 30 –¥–Ω–µ–π", callback_data="report_30")],
])

    reply_kb = persistent_menu_keyboard()

    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)
        # –ü—Ä–æ—Å—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        await update.message.reply_text("", reply_markup=reply_kb)
    elif update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)
        await update.callback_query.message.reply_text("", reply_markup=reply_kb)


def cancel_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]])


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "cancel" or data == "menu":
        context.user_data.clear()
        await menu_command(update, context)
        return

    elif data == "income":
        cats = list_categories("–î–æ—Ö–æ–¥")
        if not cats:
            # —Ç–∏—Ö–æ —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç ¬´–î—Ä—É–≥–æ–µ¬ª –∏ –∏–¥—ë–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            cat_id, cat_name = ensure_default_category("–î–æ—Ö–æ–¥")
            context.user_data.clear()
            context.user_data["action"] = "income"
            context.user_data["category_id"] = cat_id
            context.user_data["category"] = cat_name
            context.user_data["step"] = "source"  # —Å–Ω–∞—á–∞–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞",    callback_data="source_card")],
                [InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="source_cash")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",   callback_data="cancel")],
            ])
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=kb)
            return
        await _show_categories_view(query, "–î–æ—Ö–æ–¥")
        return

    elif data == "expense":
        cats = list_categories("–†–∞—Å—Ö–æ–¥")
        if not cats:
            cat_id, cat_name = ensure_default_category("–†–∞—Å—Ö–æ–¥")
            context.user_data.clear()
            context.user_data["action"] = "expense"
            context.user_data["category_id"] = cat_id
            context.user_data["category"] = cat_name
            context.user_data["step"] = "source"
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞",    callback_data="source_card")],
                [InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="source_cash")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",   callback_data="cancel")],
            ])
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=kb)
            return
        await _show_categories_view(query, "–†–∞—Å—Ö–æ–¥")
        return

    elif data.startswith("income_cat|"):
        cat_id = data.split("|", 1)[1]
        cat_name = get_category_name(cat_id)
        context.user_data.clear()
        context.user_data["action"] = "income"
        context.user_data["category_id"] = cat_id
        context.user_data["category"] = cat_name
        context.user_data["step"] = "source"  # —Å–Ω–∞—á–∞–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞",    callback_data="source_card")],
            [InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="source_cash")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",   callback_data="cancel")],
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=kb)
        return

    elif data.startswith("expense_cat|"):
        cat_id = data.split("|", 1)[1]
        cat_name = get_category_name(cat_id)
        context.user_data.clear()
        context.user_data["action"] = "expense"
        context.user_data["category_id"] = cat_id
        context.user_data["category"] = cat_name
        context.user_data["step"] = "source"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞",    callback_data="source_card")],
            [InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="source_cash")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",   callback_data="cancel")],
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=kb)
        return

    elif data.startswith("cat_add|"):
        kind = data.split("|",1)[1]  # "–î–æ—Ö–æ–¥" –∏–ª–∏ "–†–∞—Å—Ö–æ–¥"
        context.user_data.clear()
        context.user_data["action"] = "cat_add"
        context.user_data["kind"] = kind
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {kind.lower()}:", reply_markup=cancel_keyboard())
        return

    elif data == "cars_edit":
        # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—à–∏–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        try:
            client = get_gspread_client()
            ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")
            rows = ws.get_all_values()
            if not rows or len(rows) < 2:
                kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cars")]])
                await query.edit_message_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=kb)
                return

            header, body = rows[0], rows[1:]
            try:
                name_idx = header.index("–ù–∞–∑–≤–∞–Ω–∏–µ")
            except ValueError:
                kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cars")]])
                await query.edit_message_text("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ ¬´–ù–∞–∑–≤–∞–Ω–∏–µ¬ª.", reply_markup=kb)
                return

            # –ö–Ω–æ–ø–∫–∏ –ø–æ –∏–º–µ–Ω–∞–º
            btns = []
            for r in body:
                if name_idx < len(r) and r[name_idx].strip():
                    name = r[name_idx].strip()
                    btns.append([InlineKeyboardButton(name, callback_data=f"editcar_select|{name}")])

            btns.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cars")])
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(btns))
        except Exception as e:
            logger.error(f"cars_edit error: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫.")
        return

    elif data.startswith("car_extend:"):
        car_id = data.split(":", 1)[1]

        client = get_gspread_client()
        ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")

        row_idx = _find_row_by_id(ws, car_id)
        if not row_idx:
            await query.edit_message_text("‚ùå –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        rows = ws.get_all_values()
        header = rows[0]
        idx = {h.strip(): i for i, h in enumerate(header)}
        name_col = idx.get("–ù–∞–∑–≤–∞–Ω–∏–µ")
        car_name = rows[row_idx-1][name_col].strip() if name_col is not None else car_id

        context.user_data["action"] = "extend_contract"
        context.user_data["car_id"] = car_id
        context.user_data["car_name"] = car_name

        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è *{car_name}* (–Ω–∞–ø—Ä–∏–º–µ—Ä 20.11.2025):",
            parse_mode="Markdown"
        )
        return

    elif data.startswith("editcar_select|"):
        name = data.split("|", 1)[1]
        context.user_data["edit_car_name"] = name

        try:
            client = get_gspread_client()
            ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")

            row_idx = _find_row_by_name(ws, name)
            if not row_idx:
                await query.edit_message_text(
                    "üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cars_edit")]])
                )
                return

            header = ws.row_values(1)
            row    = ws.row_values(row_idx)

            def get_col(label: str) -> str:
                return row[header.index(label)].strip() if label in header and header.index(label) < len(row) else ""

            car_id       = get_col("ID")  # –Ω—É–∂–µ–Ω –¥–ª—è –Ω–∞–¥—ë–∂–Ω—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
            vin          = get_col("VIN")
            plate        = get_col("–ù–æ–º–µ—Ä")
            driver       = get_col("–í–æ–¥–∏—Ç–µ–ª—å") or "‚Äî"
            driver_phone = get_col("–¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è") or "‚Äî"
            contract     = get_col("–î–æ–≥–æ–≤–æ—Ä –¥–æ")
            contract_fmt = _format_date_with_days(contract) if contract else "‚Äî"

            text = (
                f"üöò *{name}*\n"
                f"üîë _VIN:_ `{vin}`\n"
                f"üîñ _–ù–æ–º–µ—Ä:_ `{plate}`\n"
                f"üë§ _–í–æ–¥–∏—Ç–µ–ª—å:_ {driver}\n"
                f"üìû _–¢–µ–ª–µ—Ñ–æ–Ω:_ {driver_phone}\n"
                f"üìÉ _–î–æ–≥–æ–≤–æ—Ä:_ {contract_fmt}\n\n"
                "–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?"
            )

            # –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –≤–æ–¥–∏—Ç–µ–ª—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–°–º–µ–Ω–∏—Ç—å¬ª + ¬´–ü—Ä–æ–¥–ª–∏—Ç—å¬ª, –∏–Ω–∞—á–µ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª
            has_driver = (driver != "‚Äî") or (driver_phone != "‚Äî") or bool(contract)

            if has_driver:
                driver_rows = [
                    [InlineKeyboardButton("‚è© –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", callback_data=f"car_extend:{car_id}")],  # –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ ID –æ—Å—Ç–∞–≤–ª—è–µ–º
                    [InlineKeyboardButton("üîÅ –°–º–µ–Ω–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data="editcar_driver_menu")],  # –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                ]
            else:
                driver_rows = [
                    [InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data="editcar_driver")],       # –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                ]

            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∫–∞", callback_data="editcar_field|insurance")],
                [InlineKeyboardButton("üß∞ –¢–µ—Ö–æ—Å–º–æ—Ç—Ä",   callback_data="editcar_field|tech")],
                *driver_rows,
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data="editcar_delete_confirm")],      # –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cars_edit")],
            ])
            await query.edit_message_text(text, reply_markup=kb, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"editcar_select fetch error: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ.")
        return

    elif data == "editcar_driver_menu":
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ–∫—É—â–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º
        name = context.user_data.get("edit_car_name", "")
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÅ –°–º–µ–Ω–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data="editcar_driver_change")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data="editcar_driver_delete_confirm")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"editcar_select|{name}")],
        ])
        await query.edit_message_text(f"üöò {name}\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º?", reply_markup=kb)
        return

    elif data == "editcar_driver_change":
        # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ç –∂–µ –º–∞—Å—Ç–µ—Ä (–∏–º—è ‚Üí —Ç–µ–ª–µ—Ñ–æ–Ω ‚Üí –¥–∞—Ç–∞)
        name = context.user_data.get("edit_car_name", "")
        context.user_data["action"] = "edit_car"
        context.user_data["step"] = "edit_driver_name"
        await query.edit_message_text(
            f"üöò {name}\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=cancel_keyboard()
        )
        return

    elif data == "editcar_driver_delete_confirm":
        name = context.user_data.get("edit_car_name", "")
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data="editcar_driver_delete_yes")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"editcar_select|{name}")],
        ])
        await query.edit_message_text(f"–£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è —É ¬´{name}¬ª? –ë—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –¥–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞.", reply_markup=kb)
        return

    elif data == "editcar_driver_delete_yes":
        try:
            client = get_gspread_client()
            ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")
            name = context.user_data.get("edit_car_name", "")
            row_idx = _find_row_by_name(ws, name)
            if not row_idx:
                await query.edit_message_text("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cars_edit")]]))
                return

            col_driver        = _ensure_column(ws, "–í–æ–¥–∏—Ç–µ–ª—å")
            col_driver_phone  = _ensure_column(ws, "–¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è")
            col_contract_till = _ensure_column(ws, "–î–æ–≥–æ–≤–æ—Ä –¥–æ")

            ws.update_cell(row_idx, col_driver,        "")
            ws.update_cell(row_idx, col_driver_phone,  "")
            ws.update_cell(row_idx, col_contract_till, "")

            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="cars_edit")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="cars")],
            ])
            await query.edit_message_text("‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–æ–≥–æ–≤–æ—Ä –æ—á–∏—â–µ–Ω—ã).", reply_markup=kb)
        except Exception as e:
            logger.error(f"delete driver error: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è.")
        return    

    elif data.startswith("editcar_field|"):
        field = data.split("|", 1)[1]   # insurance | tech
        context.user_data["action"] = "edit_car"
        context.user_data["step"] = f"edit_{field}"
        prompt = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):" if field == "insurance" else "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):"
        await query.edit_message_text(prompt, reply_markup=cancel_keyboard())
        return

    elif data == "editcar_delete_confirm":
        name = context.user_data.get("edit_car_name", "-")
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="editcar_delete_yes")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cars_edit")],
        ])
        await query.edit_message_text(f"–£–¥–∞–ª–∏—Ç—å ¬´{name}¬ª –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?", reply_markup=kb)
        return

    elif data == "editcar_delete_yes":
        try:
            client = get_gspread_client()
            ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")
            row_idx = _find_row_by_name(ws, context.user_data.get("edit_car_name", ""))
            if not row_idx:
                await query.edit_message_text("–ê–≤—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cars_edit")]]))
                return
            ws.delete_rows(row_idx)
            context.user_data.pop("edit_car_name", None)
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="cars")]])
            await query.edit_message_text("‚úÖ –ú–∞—à–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=kb)
        except Exception as e:
            logger.error(f"delete car error: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å.")
        return   

    elif data == "editcar_driver":
        # —Å—Ç–∞—Ä—Ç –º–∞—Å—Ç–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
        name = context.user_data.get("edit_car_name", "")
        context.user_data["action"] = "edit_car"
        context.user_data["step"] = "edit_driver_name"
        await query.edit_message_text(
            f"üöò {name}\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=cancel_keyboard()
        )
        return     

    elif data == "source_card":
        context.user_data["source"] = "–ö–∞—Ä—Ç–∞"
        context.user_data["step"] = "amount"  # —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å–∏–º —Å—É–º–º—É
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        return

    elif data == "source_cash":
        context.user_data["source"] = "–ù–∞–ª–∏—á–Ω—ã–µ"
        context.user_data["step"] = "amount"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        return

    elif data == "transfer":
        # Start transfer flow: ask direction
        context.user_data.clear()
        context.user_data["action"] = "transfer"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ ‚Üí üíµ –° –∫–∞—Ä—Ç—ã –≤ –Ω–∞–ª–∏—á–Ω—ã–µ", callback_data="transfer_card_to_cash")],
            [InlineKeyboardButton("üíµ ‚Üí üí≥ –° –Ω–∞–ª–∏—á–Ω—ã—Ö –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="transfer_cash_to_card")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=kb)

    elif data in ["transfer_card_to_cash", "transfer_cash_to_card"]:
        context.user_data.clear()
        context.user_data["action"] = "transfer"
        context.user_data["direction"] = "card_to_cash" if data == "transfer_card_to_cash" else "cash_to_card"
        context.user_data["step"] = "amount"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=cancel_keyboard())

    elif data == "cars":
        try:
            client = get_gspread_client()
            ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")
            rows = ws.get_all_values()

            if not rows or len(rows) < 2:
                text = "üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª–∏:*\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
            else:
                header = rows[0]
                body = rows[1:]

                # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
                idx = {name.strip(): i for i, name in enumerate(header)}
                def g(row, key):
                    i = idx.get(key)
                    return row[i].strip() if (i is not None and i < len(row)) else ""

                cards = []
                for r in body:
                    name  = g(r, "–ù–∞–∑–≤–∞–Ω–∏–µ") or "-"
                    vin   = g(r, "VIN") or "-"
                    plate = g(r, "–ù–æ–º–µ—Ä") or "-"

                    ins_left  = _format_date_with_days(g(r, "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–æ"))
                    tech_left = _format_date_with_days(g(r, "–¢–û –¥–æ"))
                    driver = g(r, "–í–æ–¥–∏—Ç–µ–ª—å") or "‚Äî"
                    driver_phone = g(r, "–¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è") or "‚Äî"
                    contract_str = _format_date_with_days(g(r, "–î–æ–≥–æ–≤–æ—Ä –¥–æ"))  # 12.11.2025 (30 –¥–Ω–µ–π)

                    card = (
                        f"üöò *{name}*\n"
                        f"üîë _VIN:_ `{vin}`\n"
                        f"üîñ _–ù–æ–º–µ—Ä:_ `{plate}`\n"
                        f"üõ°Ô∏è _–°—Ç—Ä–∞—Ö–æ–≤–∫–∞:_ {_format_date_with_days(g(r, '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–æ'))}\n"
                        f"üß∞ _–¢–µ—Ö–æ—Å–º–æ—Ç—Ä:_ {_format_date_with_days(g(r, '–¢–û –¥–æ'))}\n"
                        f"üë§ _–í–æ–¥–∏—Ç–µ–ª—å:_ {driver}\n"
                        f"üìû _–¢–µ–ª–µ—Ñ–æ–Ω:_ {driver_phone}\n"
                        f"üìÉ _–î–æ–≥–æ–≤–æ—Ä:_ {contract_str}"
                    )
                    cards.append(card)

                separator = "‚îÄ" * 35  # ‚Üê –¥–ª–∏–Ω–∞ –ª–∏–Ω–∏–∏ (–ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å)
                text = "üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª–∏:*\n\n" + f"\n{separator}\n".join(cards)


            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="create_car")],
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="cars_edit")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
            ])
            await query.edit_message_text(text, reply_markup=keyboard, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ ¬´–ê–≤—Ç–æ–º–æ–±–∏–ª–∏¬ª.")


    elif data == "create_car":
        # —Å—Ç–∞—Ä—Ç –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ
        context.user_data.clear()
        context.user_data["action"] = "create_car"
        context.user_data["step"] = "car_name"
        try:
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ* (–Ω–∞–ø—Ä–∏–º–µ—Ä: Mazda 3):",
                reply_markup=cancel_keyboard(),
                parse_mode="Markdown",
            )
        except Exception as e:
            # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è ‚Äì –æ—Ç–ø—Ä–∞–≤–∏–º –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            logger.error(f"create_car edit failed: {e}")
            await query.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ* (–Ω–∞–ø—Ä–∏–º–µ—Ä: Mazda 3):",
                reply_markup=cancel_keyboard(),
                parse_mode="Markdown",
            )
        return

    elif data == "balance":
        try:
            client = get_gspread_client()
            s = compute_summary(client)
            text = (
                f"üèÅ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {_fmt_amount(s['–ù–∞—á–∞–ª—å–Ω–∞—è'])}\n"
                f"üíº –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {_fmt_amount(s['–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ'])}\n"
                f"üí∞ –î–æ—Ö–æ–¥: {_fmt_amount(s['–î–æ—Ö–æ–¥'])}\n"
                f"üí∏ –†–∞—Å—Ö–æ–¥: {_fmt_amount(s['–†–∞—Å—Ö–æ–¥'])}\n"
                f"\n"
                f"üíº –ë–∞–ª–∞–Ω—Å: {_fmt_amount(s['–ë–∞–ª–∞–Ω—Å'])}\n"
                f"üí≥ –ö–∞—Ä—Ç–∞: {_fmt_amount(s['–ö–∞—Ä—Ç–∞'])}\n"
                f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {_fmt_amount(s['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
            )
            keyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="income"),
                        InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="expense"),
                    ],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                ]
            )
            await query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.")

    elif data in ["report_7", "report_30"]:
        days = 7 if data == "report_7" else 30
        try:
            client = get_gspread_client()

            in_card, in_cash, _ = _sum_sheet_period(client, "–î–æ—Ö–æ–¥", days)
            ex_card, ex_cash, _ = _sum_sheet_period(client, "–†–∞—Å—Ö–æ–¥", days)

            income_total  = in_card + in_cash
            expense_total = ex_card + ex_cash
            net_income    = income_total - expense_total

            text = (
                f"üìÖ –û—Ç—á—ë—Ç –∑–∞ {days} –¥–Ω–µ–π:\n\n"
                f"üì• –î–æ—Ö–æ–¥:  {_fmt_amount(income_total)}  (üí≥ {_fmt_amount(in_card)} | üíµ {_fmt_amount(in_cash)})\n"
                f"üì§ –†–∞—Å—Ö–æ–¥: {_fmt_amount(expense_total)} (üí≥ {_fmt_amount(ex_card)} | üíµ {_fmt_amount(ex_cash)})\n"
                f"‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî\n"
                f"üíº –ò—Ç–æ–≥: *{_fmt_amount(net_income)}*"
            )
            keyboard = InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"report_{days}_details_page0")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                ]
            )
            await query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç.")
        return


    elif re.match(r"report_(7|30)_details_page(\d+)", data):
        m = re.match(r"report_(7|30)_details_page(\d+)", data)
        days = int(m.group(1))
        page = int(m.group(2))

        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å context.user_data, –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        context.user_data["report_days"] = days
        context.user_data["report_page"] = page

        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥—ã", callback_data=f"report_{days}_details_income_page{page}")],
                [InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥—ã", callback_data=f"report_{days}_details_expense_page{page}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"report_{days}")],
            ]
        )
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)

    elif re.match(r"report_(7|30)_details_(income|expense)_page(\d+)", data):
        m = re.match(r"report_(7|30)_details_(income|expense)_page(\d+)", data)
        days, detail_type, page = int(m.group(1)), m.group(2), int(m.group(3))
        try:
            client = get_gspread_client()
            is_income = (detail_type == "income")
            sheet_name = "–î–æ—Ö–æ–¥" if is_income else "–†–∞—Å—Ö–æ–¥"

            _, _, filtered = _sum_sheet_period(client, sheet_name, days)

            page_size = 10
            total_pages = max(1, (len(filtered) + page_size - 1) // page_size)
            page = max(0, min(page, total_pages - 1))
            page_rows = filtered[page * page_size : (page + 1) * page_size]

            lines = [_render_detail_line(r, is_income) for r in page_rows]
            text = f"üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ({'–î–æ—Ö–æ–¥' if is_income else '–†–∞—Å—Ö–æ–¥'}) –∑–∞ {days} –¥–Ω–µ–π:\n\n"
            text += "\n".join(lines) if lines else "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

            buttons = []
            if page > 0:
                buttons.append(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"report_{days}_details_{detail_type}_page{page-1}")
                )
            if page < total_pages - 1:
                buttons.append(
                    InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"report_{days}_details_{detail_type}_page{page+1}")
                )

            keyboard = InlineKeyboardMarkup(
                [
                    buttons if buttons else [InlineKeyboardButton("‚Ä¢ 1/1 ‚Ä¢", callback_data=f"report_{days}_details_page0")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"report_{days}_details_page0")],
                    [InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="menu")],
                ]
            )
            await query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ—Ç—á—ë—Ç–∞: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞.")
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
async def on_menu_button_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await menu_command(update, context)


async def handle_amount_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    # -------- –û—Ç–º–µ–Ω–∞ --------
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        context.user_data.clear()
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
        await menu_command(update, context)
        return

    # --- DEBUG: –∫–æ—Ä–æ—Ç–∫–∏–π –ª–æ–≥ —à–∞–≥–æ–≤ (–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —É–±—Ä–∞—Ç—å) ---
    try:
        logger.info(f"[TEXT] action={context.user_data.get('action')} step={context.user_data.get('step')} text={(update.message.text or '').strip()!r}")
    except Exception:
        pass

    # --- –ö–û–†–û–¢–ö–û–ï –®–û–°–°–ï –¥–ª—è –¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥: amount -> description ---
    action = context.user_data.get("action")
    step   = context.user_data.get("step")
    text   = (update.message.text or "").strip()

    from decimal import Decimal, ROUND_HALF_UP
    import datetime
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    def _to_amount(s: str) -> Decimal:
        s = (s or "").strip().replace(",", ".")
        return Decimal(s)

    async def _ask_source(update, context):
        context.user_data["step"] = "source"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞",    callback_data="source_card")],
            [InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="source_cash")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",   callback_data="cancel")],
        ])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=kb)

    # ====== –®–ê–ì –í–í–û–î–ê –°–£–ú–ú–´ ======
    if step == "amount":
        try:
            amount = _to_amount(text)
            if amount <= 0:
                raise ValueError("non-positive")
            context.user_data["amount"] = amount

            # –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —É —Ç–µ–±—è
            # ---- –ú–ì–ù–û–í–ï–ù–ù–´–ô –ü–ï–†–ï–í–û–î (–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è) ----
    if action == "transfer":
        description = ""
        direction = context.user_data.get("direction")  # "card_to_cash" | "cash_to_card"

        try:
            client = get_gspread_client()
            income_ws  = client.open_by_key(SPREADSHEET_ID).worksheet("–î–æ—Ö–æ–¥")
            expense_ws = client.open_by_key(SPREADSHEET_ID).worksheet("–†–∞—Å—Ö–æ–¥")

            now = datetime.datetime.now().strftime("%d.%m.%Y %H:%–ú")
            income_row  = [now, "", "–ü–µ—Ä–µ–≤–æ–¥", "", "", description]
            expense_row = [now, "", "–ü–µ—Ä–µ–≤–æ–¥", "", "", description]

            q = str(amount.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP))

            if direction == "card_to_cash":
                # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –∫–∞—Ä—Ç—ã (–†–∞—Å—Ö–æ–¥ D), –ø–æ–ø–æ–ª–Ω—è–µ–º –Ω–∞–ª–∏—á–Ω—ã–µ (–î–æ—Ö–æ–¥ E)
                expense_row[3] = q  # üí≥ D
                income_row[4]  = q  # üíµ E
                arrow = "üí≥ ‚Üí üíµ"
            else:
                # —Å–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–Ω—ã–µ (–†–∞—Å—Ö–æ–¥ E), –ø–æ–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É (–î–æ—Ö–æ–¥ D)
                expense_row[4] = q  # üíµ E
                income_row[3]  = q  # üí≥ D
                arrow = "üíµ ‚Üí üí≥"

            expense_ws.append_row(expense_row, value_input_option="USER_ENTERED", table_range="A:F")
            income_ws.append_row(income_row,  value_input_option="USER_ENTERED", table_range="A:F")

            # –û–±–Ω–æ–≤–∏–º –±–∞–ª–∞–Ω—Å —É–∂–µ –ø–æ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            live = compute_balance(client)

            text_msg = (
                f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:\n"
                f"{arrow}  {amount}\n"
                f"\nüìä –ë–∞–ª–∞–Ω—Å:\n"
                f"üíº {_fmt_amount(live['–ë–∞–ª–∞–Ω—Å'])}\n"
                f"üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])}\n"
                f"üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
            )
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥",  callback_data="income"),
                InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="expense")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
            ])
            context.user_data.clear()
            await update.message.reply_text(text_msg, reply_markup=kb, parse_mode="Markdown")

            # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            try:
                group_msg = (
                    f"üîÅ –ü–µ—Ä–µ–≤–æ–¥: {arrow} {_fmt_amount(amount)}\n"
                    f"–ë–∞–ª–∞–Ω—Å: üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])} | üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
                )
                await context.bot.send_message(chat_id=REMINDER_CHAT_ID, text=group_msg, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.")
        return

    # ====== –®–ê–ì –í–í–û–î–ê –û–ü–ò–°–ê–ù–ò–Ø ======
    if step == "description":
        description = text or "-"
        now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

        amount   = context.user_data.get("amount")
        source   = (context.user_data.get("source") or "").strip()
        cat_id   = context.user_data.get("category_id")
        cat_name = context.user_data.get("category")

        # –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞/—Å—É–º–º—ã ‚Äî –≤–µ—Ä–Ω—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω—É–∂–Ω—ã–π —à–∞–≥
        if source not in ("–ö–∞—Ä—Ç–∞", "–ù–∞–ª–∏—á–Ω—ã–µ"):
            await _ask_source(update, context)
            return
        if amount is None:
            context.user_data["step"] = "amount"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
            return

        # –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç ‚Äî —Ç–∏—Ö–æ —Å—Ç–∞–≤–∏–º ¬´–î—Ä—É–≥–æ–µ¬ª –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
        try:
            if not cat_id or not cat_name:
                if action == "income":
                    cat_id, cat_name = ensure_default_category("–î–æ—Ö–æ–¥")
                else:
                    cat_id, cat_name = ensure_default_category("–†–∞—Å—Ö–æ–¥")
        except Exception as e:
            logger.error(f"ensure_default_category error: {e}")
            cat_id, cat_name = "", "–î—Ä—É–≥–æ–µ"

        # –∑–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç
        try:
            client = get_gspread_client()
            ws_name = "–î–æ—Ö–æ–¥" if action == "income" else "–†–∞—Å—Ö–æ–¥"
            ws = client.open_by_key(SPREADSHEET_ID).worksheet(ws_name)

            # —Å—Ç—Ä–æ–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
            # [–î–∞—Ç–∞, –ö–∞—Ç–µ–≥–æ—Ä–∏—èID, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, üí≥ –ö–∞—Ä—Ç–∞, üíµ –ù–∞–ª–∏—á–Ω—ã–µ, üìù –û–ø–∏—Å–∞–Ω–∏–µ]
            row = [now, cat_id, cat_name, "", "", description]
            q   = str(amount.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP))
            if source == "–ö–∞—Ä—Ç–∞":
                row[3] = q
            else:
                row[4] = q

            # –ß—Ç–æ–±—ã –Ω–µ —É–ø–∏—Ä–∞—Ç—å—Å—è –≤ –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç ‚Äî –º–æ–∂–Ω–æ –±–µ–∑ table_range,
            # –Ω–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –æ—Å—Ç–∞–≤—å A:F
            ws.append_row(row, value_input_option="USER_ENTERED")

            # –±–∞–ª–∞–Ω—Å
            live = compute_balance(client)

            header = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ *–î–æ—Ö–æ–¥*:" if action == "income" else "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ *–†–∞—Å—Ö–æ–¥*:"
            money  = f"üí∞ {amount} ({source})" if action == "income" else f"üí∏ -{amount} ({source})"
            text_msg = (
                f"{header}\n"
                f"üìÖ {now}\n"
                f"üè∑ {cat_name}\n"
                f"{money}\n"
                f"üìù {description}"
                f"\n\nüìä –ë–∞–ª–∞–Ω—Å:\n"
                f"üíº {_fmt_amount(live['–ë–∞–ª–∞–Ω—Å'])}\n"
                f"üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])}\n"
                f"üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
            )

            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥",  callback_data="income"),
                InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="expense")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",  callback_data="menu")],
            ])
            context.user_data.clear()
            await update.message.reply_text(text_msg, reply_markup=kb, parse_mode="Markdown")

            # –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
            try:
                source_emoji = "üí≥" if source == "–ö–∞—Ä—Ç–∞" else "üíµ"
                sign = "+" if action == "income" else "-"
                group_msg = (
                    f"{'üì• –î–æ—Ö–æ–¥' if action=='income' else 'üì§ –†–∞—Å—Ö–æ–¥'}: "
                    f"{source_emoji} {sign}{_fmt_amount(amount)} ‚Äî {cat_name}"
                    + (f' ‚Äú{description}‚Äù' if description and description != "-" else "")
                    + "\n"
                    f"–ë–∞–ª–∞–Ω—Å: üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])} | üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
                )
                await context.bot.send_message(chat_id=REMINDER_CHAT_ID, text=group_msg, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"send group error: {e}")

        except Exception as e:
            logger.error(f"WRITE ERROR: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        return

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ UI ---
    if context.user_data.get("action") == "cat_add":
        kind = context.user_data.get("kind")
        name = (update.message.text or "").strip()
        if not name:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        try:
            add_category(kind, name)
            context.user_data.clear()
            await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {name}")
        except Exception as e:
            logger.error(f"cat_add error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–æ–≤–µ—Ä—å –ª–∏—Å—Ç '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'.")
        return

    # --- –î–û–•–û–î: –∫–∞—Ä—Ç–∞ -> –Ω–∞–ª–∏—á–Ω—ã–µ -> –æ–ø–∏—Å–∞–Ω–∏–µ -> –∑–∞–ø–∏—Å—å ---
    if context.user_data.get("flow") == "income" and context.user_data.get("step") == "amount_card":
        try:
            card_amt = _parse_money(update.message.text)
        except Exception:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã –ø–æ *–∫–∞—Ä—Ç–µ* (–Ω–∞–ø—Ä–∏–º–µ—Ä 123.45).", parse_mode="Markdown")
            return
        context.user_data["card_amt"] = card_amt
        context.user_data["step"] = "amount_cash"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É *–Ω–∞–ª–∏—á–Ω—ã–º–∏* (0 –µ—Å–ª–∏ –Ω–µ—Ç):", parse_mode="Markdown")
        return

    if context.user_data.get("flow") == "income" and context.user_data.get("step") == "amount_cash":
        try:
            cash_amt = _parse_money(update.message.text)
        except Exception:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã *–Ω–∞–ª–∏—á–Ω—ã–º–∏* (–Ω–∞–ø—Ä–∏–º–µ—Ä 50).", parse_mode="Markdown")
            return
        context.user_data["cash_amt"] = cash_amt
        context.user_data["step"] = "desc"
        await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è):")
        return

    if context.user_data.get("flow") == "income" and context.user_data.get("step") == "desc":
        desc = (update.message.text or "").strip() or "-"
        cat_id = context.user_data.get("category_id")
        cat_nm = context.user_data.get("category")
        card_amt = float(context.user_data.get("card_amt", 0.0))
        cash_amt = float(context.user_data.get("cash_amt", 0.0))
        try:
            append_income(cat_id, cat_nm, card_amt, cash_amt, desc)
            total = card_amt + cash_amt
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –ï—â—ë –¥–æ—Ö–æ–¥", callback_data="income")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é",    callback_data="menu")],
            ])
            msg = (
                f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{cat_nm}*\n"
                f"üí≥ –ö–∞—Ä—Ç–∞: {card_amt:.2f}\n"
                f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash_amt:.2f}\n"
                f"–ò—Ç–æ–≥–æ: *{total:.2f}*\n"
                f"üìù {desc}"
            )
            await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=kb)
        except Exception as e:
            logger.error(f"append_income error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Ö–æ–¥. –ü—Ä–æ–≤–µ—Ä—å –ª–∏—Å—Ç '–î–æ—Ö–æ–¥'.")
        context.user_data.clear()
        return

    # --- –†–ê–°–•–û–î: –∫–∞—Ä—Ç–∞ -> –Ω–∞–ª–∏—á–Ω—ã–µ -> –æ–ø–∏—Å–∞–Ω–∏–µ -> –∑–∞–ø–∏—Å—å ---
    if context.user_data.get("flow") == "expense" and context.user_data.get("step") == "amount_card":
        try:
            card_amt = _parse_money(update.message.text)
        except Exception:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã –ø–æ *–∫–∞—Ä—Ç–µ* (–Ω–∞–ø—Ä–∏–º–µ—Ä 99.99).", parse_mode="Markdown")
            return
        context.user_data["card_amt"] = card_amt
        context.user_data["step"] = "amount_cash"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É *–Ω–∞–ª–∏—á–Ω—ã–º–∏* (0 –µ—Å–ª–∏ –Ω–µ—Ç):", parse_mode="Markdown")
        return

    if context.user_data.get("flow") == "expense" and context.user_data.get("step") == "amount_cash":
        try:
            cash_amt = _parse_money(update.message.text)
        except Exception:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã *–Ω–∞–ª–∏—á–Ω—ã–º–∏* (–Ω–∞–ø—Ä–∏–º–µ—Ä 15).", parse_mode="Markdown")
            return
        context.user_data["cash_amt"] = cash_amt
        context.user_data["step"] = "desc"
        await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è):")
        return

    if context.user_data.get("flow") == "expense" and context.user_data.get("step") == "desc":
        desc = (update.message.text or "").strip() or "-"
        cat_id = context.user_data.get("category_id")
        cat_nm = context.user_data.get("category")
        card_amt = float(context.user_data.get("card_amt", 0.0))
        cash_amt = float(context.user_data.get("cash_amt", 0.0))
        try:
            append_expense(cat_id, cat_nm, card_amt, cash_amt, desc)
            total = card_amt + cash_amt
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –ï—â—ë —Ä–∞—Å—Ö–æ–¥", callback_data="expense")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é",     callback_data="menu")],
            ])
            msg = (
                f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{cat_nm}*\n"
                f"üí≥ –ö–∞—Ä—Ç–∞: {card_amt:.2f}\n"
                f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash_amt:.2f}\n"
                f"–ò—Ç–æ–≥–æ: *{total:.2f}*\n"
                f"üìù {desc}"
            )
            await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=kb)
        except Exception as e:
            logger.error(f"append_expense error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Ö–æ–¥. –ü—Ä–æ–≤–µ—Ä—å –ª–∏—Å—Ç '–†–∞—Å—Ö–æ–¥'.")
        context.user_data.clear()
        return

    # --- –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞: –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞—Ç—ã ---
    if context.user_data.get("action") == "extend_contract":
        car_id = context.user_data.get("car_id")
        car_name = context.user_data.get("car_name", car_id)
        new_date = (update.message.text or "").strip()

        client = get_gspread_client()
        ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")

        row_idx = _find_row_by_id(ws, car_id)
        if not row_idx:
            await update.message.reply_text("‚ùå –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            context.user_data.clear()
            return

        rows = ws.get_all_values()
        header = rows[0]
        idx = {h.strip(): i for i, h in enumerate(header)}
        col_contract = idx.get("–î–æ–≥–æ–≤–æ—Ä –¥–æ")
        if col_contract is None:
            await update.message.reply_text("‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ ¬´–î–æ–≥–æ–≤–æ—Ä –¥–æ¬ª.")
            context.user_data.clear()
            return

        ws.update_cell(row_idx, col_contract + 1, new_date)  # gspread 1-based

        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏", callback_data="cars")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–≤—Ç–æ", callback_data="cars_edit")],
        ])

        await update.message.reply_text(
            f"‚úÖ –î–æ–≥–æ–≤–æ—Ä –ø–æ *{car_name}* –ø—Ä–æ–¥–ª—ë–Ω –¥–æ {new_date}.",
            parse_mode="Markdown",
            reply_markup=kb
        )
        context.user_data.clear()
        return

    if context.user_data.get("action") == "edit_car":
        step = context.user_data.get("step")
        name = context.user_data.get("edit_car_name", "")
        date_txt = (update.message.text or "").strip()

        if step in ("edit_insurance", "edit_tech"):
            # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
            try:
                try:
                    d = datetime.datetime.strptime(date_txt, "%d.%m.%Y")
                except ValueError:
                    await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì")
                    return

                client = get_gspread_client()
                ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")

                row_idx = _find_row_by_name(ws, name)
                if not row_idx:
                    await update.message.reply_text("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                header = ws.row_values(1)
                col_name = "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–æ" if step == "edit_insurance" else "–¢–û –¥–æ"
                col_idx = header.index(col_name) + 1 if col_name in header else _ensure_column(ws, col_name)

                ws.update_cell(row_idx, col_idx, date_txt)

                context.user_data.pop("action", None)
                context.user_data.pop("step", None)

                kb = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="cars_edit")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="cars")],
                ])
                await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {col_name} = {date_txt} –¥–ª—è ¬´{name}¬ª.", reply_markup=kb)
            except Exception as e:
                logger.error(f"edit insurance/tech error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å.")
            return
    # -------- –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏/–¢–û) --------
    if "edit_type" in context.user_data:
        edit_type = context.user_data.pop("edit_type")
        try:
            name, new_date = map(str.strip, text.split("-", 1))
            if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", new_date):
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")
                return

            sheet_name = "–°—Ç—Ä–∞—Ö–æ–≤–∫–∏" if edit_type == "insurance" else "–¢–µ—Ö–û—Å–º–æ—Ç—Ä—ã"
            sheet = get_gspread_client().open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
            rows = sheet.get_all_values()
            for i, row in enumerate(rows):
                if row and row[0].lower() == name.lower():
                    sheet.update_cell(i + 1, 2, new_date)
                    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]])
                    await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n{name} ‚Äî {new_date}", reply_markup=kb)
                    return

            await update.message.reply_text("üö´ –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    action = context.user_data.get("action")
    step = context.user_data.get("step")
    if not action or not step:
        return

    # === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è ===
    if context.user_data.get("action") == "edit_car":
        step = context.user_data.get("step")
        car_name = context.user_data.get("edit_car_name", "")
        txt = (update.message.text or "").strip()

        # 3.1 –ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è
        if step == "edit_driver_name":
            if not txt:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è.")
                return
            context.user_data["driver_name"] = txt
            context.user_data["step"] = "edit_driver_phone"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: +48 600 000 000):",
                                            reply_markup=cancel_keyboard())
            return

        # 3.2 –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è
        if step == "edit_driver_phone":
            phone = txt
            # –º—è–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å)
            if len(phone) < 6:
                await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            context.user_data["driver_phone"] = phone
            context.user_data["step"] = "edit_driver_contract"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):",
                                            reply_markup=cancel_keyboard())
            return

        if step == "edit_driver_contract":
            try:
                datetime.datetime.strptime(txt, "%d.%m.%Y")
            except ValueError:
                await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì")
                return

            try:
                client = get_gspread_client()
                ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")
                row_idx = _find_row_by_name(ws, car_name)
                if not row_idx:
                    await update.message.reply_text("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
                col_driver        = _ensure_column(ws, "–í–æ–¥–∏—Ç–µ–ª—å")
                col_driver_phone  = _ensure_column(ws, "–¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è")
                col_contract_till = _ensure_column(ws, "–î–æ–≥–æ–≤–æ—Ä –¥–æ")

                # –°–æ—Ö—Ä–∞–Ω–∏–º –ª–æ–∫–∞–ª—å–Ω–æ –ü–†–ï–ñ–î–ï —á–µ–º —á–∏—Å—Ç–∏—Ç—å user_data
                driver_name  = context.user_data.get("driver_name", "")
                driver_phone = context.user_data.get("driver_phone", "")
                contract_till = txt

                # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
                ws.update_cell(row_idx, col_driver,        driver_name)
                ws.update_cell(row_idx, col_driver_phone,  driver_phone)
                ws.update_cell(row_idx, col_contract_till, contract_till)

                # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                context.user_data.pop("action", None)
                context.user_data.pop("step", None)
                context.user_data.pop("driver_name", None)
                context.user_data.pop("driver_phone", None)

                kb = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="cars_edit")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="cars")],
                ])
                pretty = _format_date_with_days(contract_till)
                await update.message.reply_text(
                    "‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                    f"üë§ {driver_name}\n"
                    f"üìû {driver_phone}\n"
                    f"üìÉ –î–æ–≥–æ–≤–æ—Ä: {pretty}",
                    reply_markup=kb,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"edit driver error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è.")
            return

    # -------- –®–∞–≥ –≤–≤–æ–¥–∞ —Å—É–º–º—ã --------
    if step == "amount":
        try:
            amount = _to_amount(text)
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

            context.user_data["amount"] = amount

            # ---- –ú–ì–ù–û–í–ï–ù–ù–´–ô –ü–ï–†–ï–í–û–î (–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è) ----
            if action == "transfer":
                description = ""
                direction = context.user_data.get("direction")

                try:
                    client = get_gspread_client()
                    income_ws  = client.open_by_key(SPREADSHEET_ID).worksheet("–î–æ—Ö–æ–¥")
                    expense_ws = client.open_by_key(SPREADSHEET_ID).worksheet("–†–∞—Å—Ö–æ–¥")

                    # –§–æ—Ä–º–∞—Ç –Ω–æ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤:
                    # [–î–∞—Ç–∞, –ö–∞—Ç–µ–≥–æ—Ä–∏—èID, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, üí≥ –ö–∞—Ä—Ç–∞, üíµ –ù–∞–ª–∏—á–Ω—ã–µ, üìù –û–ø–∏—Å–∞–Ω–∏–µ]
                    now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
                    income_row  = [now, "", "–ü–µ—Ä–µ–≤–æ–¥", "", "", description]
                    expense_row = [now, "", "–ü–µ—Ä–µ–≤–æ–¥", "", "", description]

                    q = str(amount.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP))

                    if direction == "card_to_cash":
                        # —Ä–∞—Å—Ö–æ–¥ –ø–æ –∫–∞—Ä—Ç–µ, –¥–æ—Ö–æ–¥ –Ω–∞–ª–∏—á–Ω—ã–º–∏
                        expense_row[3] = q  # üí≥ –ö–∞—Ä—Ç–∞ (4-—è –∫–æ–ª–æ–Ω–∫–∞ -> –∏–Ω–¥–µ–∫—Å 3)
                        income_row[4]  = q  # üíµ –ù–∞–ª–∏—á–Ω—ã–µ (5-—è –∫–æ–ª–æ–Ω–∫–∞ -> –∏–Ω–¥–µ–∫—Å 4)
                        arrow = "üí≥ ‚Üí üíµ"
                    else:
                        # —Ä–∞—Å—Ö–æ–¥ –Ω–∞–ª–∏—á–Ω—ã–º–∏, –¥–æ—Ö–æ–¥ –ø–æ –∫–∞—Ä—Ç–µ
                        expense_row[4] = q  # üíµ –ù–∞–ª–∏—á–Ω—ã–µ
                        income_row[3]  = q  # üí≥ –ö–∞—Ä—Ç–∞
                        arrow = "üíµ ‚Üí üí≥"

                    expense_ws.append_row(expense_row, value_input_option="USER_ENTERED", table_range="A:F")
                    income_ws.append_row(income_row,  value_input_option="USER_ENTERED", table_range="A:F")

                    # –ë–∞–ª–∞–Ω—Å
                    live = compute_balance(client)

                    text_msg = (
                        f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:\n"
                        f"{arrow}  {amount}\n"
                        f"\nüìä –ë–∞–ª–∞–Ω—Å:\n"
                        f"üíº {_fmt_amount(live['–ë–∞–ª–∞–Ω—Å'])}\n"
                        f"üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])}\n"
                        f"üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
                    )
                    kb = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥",  callback_data="income"),
                        InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="expense")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                    ])
                    context.user_data.clear()
                    await update.message.reply_text(text_msg, reply_markup=kb, parse_mode="Markdown")

                    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
                    try:
                        group_msg = (
                            f"üîÅ –ü–µ—Ä–µ–≤–æ–¥: {arrow} {_fmt_amount(amount)}\n"
                            f"–ë–∞–ª–∞–Ω—Å: üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])} | üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
                        )
                        await context.bot.send_message(chat_id=REMINDER_CHAT_ID, text=group_msg, parse_mode="Markdown")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.")
                return

            # –ò—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Üí —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            context.user_data["step"] = "description"
            await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è):")

        except Exception:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–ø—Ä–∏–º–µ—Ä: 1200.50)")
        return


    # -------- –®–∞–≥ –æ–ø–∏—Å–∞–Ω–∏—è (–¢–û–õ–¨–ö–û –¥–ª—è –¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥) --------
    if step == "description":
        description = text or "-"
        now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

        amount   = context.user_data.get("amount")
        source   = context.user_data.get("source", "").strip()
        cat_id   = context.user_data.get("category_id")
        cat_name = context.user_data.get("category")

        # ‚úÖ –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ ‚Äî –≤–µ—Ä–Ω—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±–æ—Ä
        if source not in ("–ö–∞—Ä—Ç–∞", "–ù–∞–ª–∏—á–Ω—ã–µ"):
            context.user_data["step"] = "source"
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞",    callback_data="source_card")],
                [InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="source_cash")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",   callback_data="cancel")],
            ])
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=kb)
            return

        # ‚úÖ –ó–∞—â–∏—Ç–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å
        if amount is None:
            context.user_data["step"] = "amount"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
            return

        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç ¬´–î—Ä—É–≥–æ–µ¬ª
        try:
            if not cat_id or not cat_name:
                if action == "income":
                    cat_id, cat_name = ensure_default_category("–î–æ—Ö–æ–¥")
                else:
                    cat_id, cat_name = ensure_default_category("–†–∞—Å—Ö–æ–¥")
        except Exception as e:
            logger.error(f"ensure_default_category error: {e}")
            cat_id, cat_name = "", "–î—Ä—É–≥–æ–µ"

        try:
            client = get_gspread_client()

            # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: [–î–∞—Ç–∞, –ö–∞—Ç–µ–≥–æ—Ä–∏—èID, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, üí≥ –ö–∞—Ä—Ç–∞, üíµ –ù–∞–ª–∏—á–Ω—ã–µ, üìù –û–ø–∏—Å–∞–Ω–∏–µ]
            row = [now, cat_id, cat_name, "", "", description]
            q   = str(amount.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP))

            if source == "–ö–∞—Ä—Ç–∞":
                row[3] = q  # üí≥ –ö–∞—Ä—Ç–∞
            else:
                row[4] = q  # üíµ –ù–∞–ª–∏—á–Ω—ã–µ

            if action == "income":
                sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–î–æ—Ö–æ–¥")
                sheet.append_row(row, value_input_option="USER_ENTERED", table_range="A:F")
                money_line = f"üí∞ {amount} ({source})"
                text_msg = (
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ *–î–æ—Ö–æ–¥*:\n"
                    f"üìÖ {now}\n"
                    f"üè∑ {cat_name}\n"
                    f"{money_line}\n"
                    f"üìù {description}"
                )
            else:
                sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–†–∞—Å—Ö–æ–¥")
                sheet.append_row(row, value_input_option="USER_ENTERED", table_range="A:F")
                money_line = f"üí∏ -{amount} ({source})"
                text_msg = (
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ *–†–∞—Å—Ö–æ–¥*:\n"
                    f"üìÖ {now}\n"
                    f"{money_line}\n"
                    f"üè∑ {cat_name}\n"
                    f"üìù {description}"
                )

            # –ë–∞–ª–∞–Ω—Å
            live = compute_balance(client)
            text_msg += (
                f"\n\nüìä –ë–∞–ª–∞–Ω—Å:\n"
                f"üíº {_fmt_amount(live['–ë–∞–ª–∞–Ω—Å'])}\n"
                f"üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])}\n"
                f"üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
            )

            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥",  callback_data="income"),
                InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="expense")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
            ])
            context.user_data.clear()
            await update.message.reply_text(text_msg, reply_markup=kb, parse_mode="Markdown")

            # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            try:
                source_emoji = "üí≥" if source == "–ö–∞—Ä—Ç–∞" else "üíµ"
                desc_q = f' ‚Äú{description}‚Äù' if description and description != "-" else ""
                if action == "income":
                    group_msg = (
                        f"üì• –î–æ—Ö–æ–¥: {source_emoji} +{_fmt_amount(amount)} ‚Äî {cat_name}{desc_q}\n"
                        f"–ë–∞–ª–∞–Ω—Å: üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])} | üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
                    )
                else:
                    group_msg = (
                        f"üì§ –†–∞—Å—Ö–æ–¥: {source_emoji} -{_fmt_amount(amount)} ‚Äî {cat_name}{desc_q}\n"
                        f"–ë–∞–ª–∞–Ω—Å: üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])} | üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
                    )
                await context.bot.send_message(chat_id=REMINDER_CHAT_ID, text=group_msg, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        return

    # ===== –°–û–ó–î–ê–ù–ò–ï –ê–í–¢–û =====
    if context.user_data.get("action") == "create_car":
        step = context.user_data.get("step")

        # 1) –ù–∞–∑–≤–∞–Ω–∏–µ
        if step == "car_name":
            name = (text or "").strip()
            if not name:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: Mazda 3")
                return
            context.user_data["car_name"] = name
            context.user_data["step"] = "car_vin"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ *VIN* (17 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∞—Ç–∏–Ω–∏—Ü–∞+—Ü–∏—Ñ—Ä—ã):", parse_mode="Markdown")
            return

        # 2) VIN
        if step == "car_vin":
            vin = (text or "").strip().upper().replace(" ", "")
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–¥–ª–∏–Ω–∞ 17 –∏ –±–µ–∑ I/O/Q)
            bad = set("IOQ")
            if len(vin) != 17 or any(ch in bad for ch in vin):
                await update.message.reply_text("‚ö†Ô∏è VIN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 17 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ I/O/Q. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            context.user_data["car_vin"] = vin
            context.user_data["step"] = "car_plate"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ *–≥–æ—Å–Ω–æ–º–µ—Ä* (–∫–∞–∫ –≤ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–µ):", parse_mode="Markdown")
            return

        # 3) –ù–æ–º–µ—Ä (–≥–æ—Å–Ω–æ–º–µ—Ä) -> –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
        if step == "car_plate":
            plate = (text or "").strip().upper()
            if not plate:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä.")
                return
            context.user_data["car_plate"] = plate

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
            try:
                client = get_gspread_client()
                ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")

                new_id = datetime.datetime.now().strftime("car_%Y%m%d_%H%M%S")
                now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

                row = [
                    new_id,                          # A: ID
                    context.user_data["car_name"],   # B: –ù–∞–∑–≤–∞–Ω–∏–µ
                    context.user_data["car_vin"],    # C: VIN
                    context.user_data["car_plate"],  # D: –ù–æ–º–µ—Ä
                    now,                             # E: –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                ]
                ws.append_row(row, value_input_option="USER_ENTERED", table_range="A:E")

                # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                msg = (
                    "‚úÖ –ê–≤—Ç–æ —Å–æ–∑–¥–∞–Ω–æ:\n"
                    f"ID: {new_id}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {context.user_data['car_name']}\n"
                    f"VIN: {context.user_data['car_vin']}\n"
                    f"–ù–æ–º–µ—Ä: {context.user_data['car_plate']}\n"
                    f"–î–∞—Ç–∞: {now}"
                )
                context.user_data.clear()
                kb = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π", callback_data="cars")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
                ])
                await update.message.reply_text(msg, reply_markup=kb)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—Å—Ç ¬´–ê–≤—Ç–æ–º–æ–±–∏–ª–∏¬ª.")
            return    

async def check_reminders(app):
    """
    –†–∞–∑ –≤ —Å—É—Ç–∫–∏ –ø—Ä–æ–±–µ–≥–∞–µ—Ç –ª–∏—Å—Ç '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏' –∏ —à–ª—ë—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–µ –∏ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä—É.
    –¢—Ä–µ–±—É–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: '–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–æ', '–¢–û –¥–æ'.
    –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    """
    REMIND_BEFORE_DAYS = 7  # –æ–ø–æ–≤–µ—â–∞—Ç—å –∑–∞ N –¥–Ω–µ–π

    while True:
        try:
            client = get_gspread_client()
            wb = client.open_by_key(SPREADSHEET_ID)
            ws = wb.worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")

            # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            header = ws.row_values(1)
            if not header:
                header = []
            # –æ–±–µ—Å–ø–µ—á–∏–º –∫–æ–ª–æ–Ω–∫–∏ (–≤–µ—Ä–Ω—ë—Ç –∏–Ω–¥–µ–∫—Å 1-based)
            col_idx_name = _ensure_column(ws, "–ù–∞–∑–≤–∞–Ω–∏–µ")
            col_idx_ins  = _ensure_column(ws, "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–æ")
            col_idx_tech = _ensure_column(ws, "–¢–û –¥–æ")
            col_idx_contract = _ensure_column(ws, "–î–æ–≥–æ–≤–æ—Ä –¥–æ")

            # –±–µ—Ä—ë–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            rows = ws.get_all_values()
            body = rows[1:] if len(rows) > 1 else []

            today = datetime.date.today()

            for r in body:
                name = r[col_idx_name - 1].strip() if len(r) >= col_idx_name else ""
                ins  = r[col_idx_ins  - 1].strip() if len(r) >= col_idx_ins  else ""
                tech = r[col_idx_tech - 1].strip() if len(r) >= col_idx_tech else ""
                contract = r[col_idx_contract - 1].strip() if len(r) >= col_idx_contract else ""

                # --- —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ ---
                if ins:
                    label, days = _days_left_label(ins)
                    if days is not None:
                        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ / —Å–µ–≥–æ–¥–Ω—è / –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞
                        if days < 0:
                            msg = f"üö® –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ *{name}* –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞! ({ins}, {label})."
                            await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=msg, parse_mode="Markdown")
                        elif days == 0:
                            msg = f"‚è∞ –°–µ–≥–æ–¥–Ω—è –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ *{name}* ({ins})."
                            await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=msg, parse_mode="Markdown")
                        elif days <= REMIND_BEFORE_DAYS:
                            msg = f"‚è∞ –ß–µ—Ä–µ–∑ {days} –¥–Ω–µ–π –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ *{name}* ({ins})."
                            await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=msg, parse_mode="Markdown")

                # --- —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä ---
                if tech:
                    label, days = _days_left_label(tech)
                    if days is not None:
                        if days < 0:
                            msg = f"üö® –¢–µ—Ö–æ—Å–º–æ—Ç—Ä –Ω–∞ *{name}* –ø—Ä–æ—Å—Ä–æ—á–µ–Ω! ({tech}, {label})."
                            await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=msg, parse_mode="Markdown")
                        elif days == 0:
                            msg = f"‚è∞ –°–µ–≥–æ–¥–Ω—è –∏—Å—Ç–µ–∫–∞–µ—Ç —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä –Ω–∞ *{name}* ({tech})."
                            await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=msg, parse_mode="Markdown")
                        elif days <= REMIND_BEFORE_DAYS:
                            msg = f"‚è∞ –ß–µ—Ä–µ–∑ {days} –¥–Ω–µ–π –∏—Å—Ç–µ–∫–∞–µ—Ç —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä –Ω–∞ *{name}* ({tech})."
                            await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=msg, parse_mode="Markdown")

                if contract:
                    label, days = _days_left_label(contract)
                    if days is not None:
                        if days < 0:
                            msg = (
                                f"üìÉü§ù *–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã* –ø–æ *{name}* –∏—Å—Ç—ë–∫!\n"
                                f"‚è± –ë—ã–ª –¥–æ: {contract} ({label})."
                            )
                            await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=msg, parse_mode="Markdown")
                        elif days == 0:
                            msg = (
                                f"üìÉü§ù –°–µ–≥–æ–¥–Ω—è –∏—Å—Ç–µ–∫–∞–µ—Ç *–¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã* –ø–æ *{name}*.\n"
                                f"‚è± –î–∞—Ç–∞: {contract}."
                            )
                            await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=msg, parse_mode="Markdown")
                        elif days <= REMIND_BEFORE_DAYS:
                            msg = (
                                f"üìÉü§ù –ß–µ—Ä–µ–∑ {days} –¥–Ω–µ–π –∏—Å—Ç–µ–∫–∞–µ—Ç *–¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã* –ø–æ *{name}*.\n"
                                f"‚è± –î–æ: {contract}."
                            )
                            await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=msg, parse_mode="Markdown")
     
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

        # —Å–ø–∏–º 24 —á–∞—Å–∞ (–º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –¥–æ 6‚Äì12, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —á–∞—â–µ)
        await asyncio.sleep(86400)

async def on_startup(app):
    asyncio.create_task(check_reminders(app))


def main():
    application = ApplicationBuilder().token(Telegram_Token).build()
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CallbackQueryHandler(handle_button))
    application.add_handler(MessageHandler(filters.Regex("^(–ú–µ–Ω—é)$"), on_menu_button_pressed))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount_description))
    application.post_init = on_startup
    application.run_polling()


if __name__ == "__main__":
    main()
