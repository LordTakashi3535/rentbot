import os
import json
import base64
import logging
import gspread
import datetime
import re

from oauth2client.service_account import ServiceAccountCredentials
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

Telegram_Token = os.getenv("Telegram_Token")
GOOGLE_CREDENTIALS_B64 = os.getenv("GOOGLE_CREDENTIALS_B64")
SPREADSHEET_ID = "1qjVJZUqm1hT5IkrASq-_iL9cc4wDl8fdjvd7KDMWL-U"


def get_gspread_client():
    creds_json = base64.b64decode(GOOGLE_CREDENTIALS_B64).decode("utf-8")
    creds_dict = json.loads(creds_json)
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)


def get_data():
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–°–≤–æ–¥–∫–∞")
        rows = sheet.get_all_values()
        return {row[0].strip(): row[1].strip() for row in rows if len(row) >= 2}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}


# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é (inline –∫–Ω–æ–ø–∫–∏)
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inline_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="add_income"),
         InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")],
        [InlineKeyboardButton("üõ° –°—Ç—Ä–∞—Ö–æ–≤–∫–∏", callback_data="insurance"),
         InlineKeyboardButton("üß∞ –¢–µ—Ö.–û—Å–º–æ—Ç—Ä—ã", callback_data="tech")]
    ])

    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)
    elif update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)


def cancel_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]])


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "cancel" or data == "menu":
        context.user_data.clear()
        await menu_command(update, context)
        return

    if data == "add_income":
        context.user_data.clear()
        context.user_data["action"] = "income_category"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("Franky", callback_data="cat_franky")],
            [InlineKeyboardButton("Fraiz", callback_data="cat_fraiz")],
            [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="cat_other")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=keyboard)

    elif data in ["cat_franky", "cat_fraiz", "cat_other"]:
        category_map = {
            "cat_franky": "Franky",
            "cat_fraiz": "Fraiz",
            "cat_other": "–î—Ä—É–≥–æ–µ"
        }
        context.user_data["action"] = "income"
        context.user_data["category"] = category_map[data]
        context.user_data["step"] = "amount"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:", reply_markup=cancel_keyboard())

    elif data == "add_expense":
        context.user_data.clear()
        context.user_data["action"] = "expense"
        context.user_data["step"] = "amount"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=cancel_keyboard())

    elif data == "balance":
        try:
            data = get_data()
            text = (
                f"üíº –ë–∞–ª–∞–Ω—Å: {data.get('–ë–∞–ª–∞–Ω—Å', '‚Äî')}\n"
                f"üí≥ –ö–∞—Ä—Ç–∞: {data.get('–ö–∞—Ä—Ç–∞', '‚Äî')}\n"
                f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {data.get('–ù–∞–ª–∏—á–Ω—ã–µ', '‚Äî')}"
            )
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="add_income"),
                 InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]
            ])
            await query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.")

    elif data == "insurance":
        try:
            sheet = get_gspread_client().open_by_key(SPREADSHEET_ID).worksheet("–°—Ç—Ä–∞—Ö–æ–≤–∫–∏")
            rows = sheet.get_all_values()[1:]
            if not rows:
                await query.edit_message_text("üöó –°—Ç—Ä–∞—Ö–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]
                ]))
                return
            text = "üöó –°—Ç—Ä–∞—Ö–æ–≤–∫–∏:\n"
            for i, row in enumerate(rows):
                text += f"{i+1}. {row[0]} –¥–æ {row[1] if len(row) > 1 else '‚Äî'}\n"

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_insurance")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]
            ])
            await query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ö–æ–≤–æ–∫: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞–º.")

    elif data == "tech":
        try:
            sheet = get_gspread_client().open_by_key(SPREADSHEET_ID).worksheet("–¢–µ—Ö–û—Å–º–æ—Ç—Ä—ã")
            rows = sheet.get_all_values()[1:]
            if not rows:
                await query.edit_message_text("üß∞ –¢–µ—Ö.–û—Å–º–æ—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]
                ]))
                return
            text = "üß∞ –¢–µ—Ö.–û—Å–º–æ—Ç—Ä—ã:\n"
            for i, row in enumerate(rows):
                text += f"{i+1}. {row[0]} –¥–æ {row[1] if len(row) > 1 else '‚Äî'}\n"

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_tech")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]
            ])
            await query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä–æ–≤: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä–∞–º.")

    elif data == "edit_insurance":
        context.user_data["edit_type"] = "insurance"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ (–ü—Ä–∏–º–µ—Ä: Toyota - 01.09.2025)", reply_markup=cancel_keyboard())

    elif data == "edit_tech":
        context.user_data["edit_type"] = "tech"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ (–ü—Ä–∏–º–µ—Ä: BMW - 15.10.2025)", reply_markup=cancel_keyboard())


async def handle_amount_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        context.user_data.clear()
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=cancel_keyboard())
        return

    edit_type = context.user_data.get("edit_type")
    if edit_type:
        try:
            name, new_date = text.split(" - ")
            new_date = new_date.strip()

            if edit_type == "insurance":
                sheet = get_gspread_client().open_by_key(SPREADSHEET_ID).worksheet("–°—Ç—Ä–∞—Ö–æ–≤–∫–∏")
            else:
                sheet = get_gspread_client().open_by_key(SPREADSHEET_ID).worksheet("–¢–µ—Ö–û—Å–º–æ—Ç—Ä—ã")

            rows = sheet.get_all_values()
            name_found = False

            for i, row in enumerate(rows):
                if row[0].lower() == name.lower():
                    name_found = True
                    sheet.update_cell(i+1, 2, new_date)
                    await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –¥–ª—è '{name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_date}.")
                    break

            if not name_found:
                await update.message.reply_text(f"‚ö†Ô∏è '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–ü—Ä–∏–º–µ—Ä: Toyota - 01.09.2025)")

        context.user_data.clear()
        return

    action = context.user_data.get("action")

    if action == "income" or action == "expense":
        try:
            amount = float(text)
            category = context.user_data.get("category")
            sheet = get_gspread_client().open_by_key(SPREADSHEET_ID).worksheet("–°–≤–æ–¥–∫–∞")

            if action == "income":
                data = get_data()
                current_balance = float(data.get("–ë–∞–ª–∞–Ω—Å", 0))
                new_balance = current_balance + amount
                sheet.update_cell(2, 2, new_balance)
                await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –∫ –¥–æ—Ö–æ–¥–∞–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}.")

            elif action == "expense":
                data = get_data()
                current_balance = float(data.get("–ë–∞–ª–∞–Ω—Å", 0))
                new_balance = current_balance - amount
                sheet.update_cell(2, 2, new_balance)
                await update.message.reply_text(f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount} —Å–ø–∏—Å–∞–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}.")

        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

        context.user_data.clear()
        return


async def set_bot_commands(app):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        BotCommand("balance", "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"),
    ]
    await app.set_my_commands(commands)


async def main():
    if not Telegram_Token or not GOOGLE_CREDENTIALS_B64:
        raise Exception("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = ApplicationBuilder().token(Telegram_Token).build()

    app.add_handler(CommandHandler("start", menu_command))
    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_amount_description))

    await set_bot_commands(app)

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()  # –ó–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞–µ–º polling, —ç—Ç–æ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π


if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
