import os
import json
import base64
import logging
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("Telegram_Token")
GOOGLE_CREDENTIALS_B64 = os.getenv("GOOGLE_CREDENTIALS_B64")

SPREADSHEET_ID = "1qjVJZUqm1hT5IkrASq-_iL9cc4wDl8fdjvd7KDMWL-U"

def get_gspread_client():
    if not GOOGLE_CREDENTIALS_B64:
        raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS_B64 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    creds_json = base64.b64decode(GOOGLE_CREDENTIALS_B64).decode("utf-8")
    creds_dict = json.loads(creds_json)

    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]

    creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
    client = gspread.authorize(creds)
    return client

# –ö–æ–º–∞–Ω–¥–∞ /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        data = sheet.get_all_values()
        preview = "\n".join([", ".join(row) for row in data[:10]]) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        await update.message.reply_text(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ:\n{preview}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ Google Sheets")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞:\n{e}")

# –ö–æ–º–∞–Ω–¥–∞ /menu - –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –º–µ–Ω—é —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1

        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –∞ –¥–∞–Ω–Ω—ã–µ ‚Äî –≤–æ –≤—Ç–æ—Ä–æ–π
        headers = sheet.row_values(1)
        values = sheet.row_values(2)

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–π
        data = dict(zip(headers, values))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é
        menu_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {data.get('–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞', '‚Äî')}\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {data.get('–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', '‚Äî')}\n"
            f"–î–æ—Ö–æ–¥: {data.get('–¥–æ—Ö–æ–¥', '‚Äî')}\n"
            f"–†–∞—Å—Ö–æ–¥: {data.get('—Ä–∞—Å—Ö–æ–¥', '‚Äî')}\n"
            f"–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç–∞: {data.get('–±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç–∞', '‚Äî')}\n"
            f"–ù–∞–ª–∏—á–Ω—ã–µ: {data.get('–Ω–∞–ª–∏—á–Ω—ã–µ', '‚Äî')}"
        )

        await update.message.reply_text(menu_text)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é –∏–∑ Google Sheets")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é:\n{e}")

def main():
    if not TELEGRAM_TOKEN:
        raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è Telegram_Token –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("test", test_command))
    app.add_handler(CommandHandler("menu", menu_command))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
