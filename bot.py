    import os
    import json
    import base64
    import logging
    import datetime
    import re
    import asyncio
    from typing import Dict, List, Tuple, Optional

    import gspread
    from oauth2client.service_account import ServiceAccountCredentials

    from telegram import (
        Update,
        InlineKeyboardMarkup,
        InlineKeyboardButton,
        ReplyKeyboardMarkup,
    )
    from telegram.ext import (
        ApplicationBuilder,
        ContextTypes,
        CommandHandler,
        CallbackQueryHandler,
        MessageHandler,
        filters,
    )

    # -----------------------------
    # Logging & Constants
    # -----------------------------
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    TELEGRAM_TOKEN: Optional[str] = os.getenv("Telegram_Token")
    GOOGLE_CREDENTIALS_B64: Optional[str] = os.getenv("GOOGLE_CREDENTIALS_B64")

    # Chat where reminders are posted
    REMINDER_CHAT_ID: int = -1002522776417

    # Google Sheets
    SPREADSHEET_ID: str = "1qjVJZUqm1hT5IkrASq-_iL9cc4wDl8fdjvd7KDMWL-U"

    # -----------------------------
    # Google Sheets helpers
    # -----------------------------
    def get_gspread_client() -> gspread.Client:
        """
        Build an authorized gspread client using base64-encoded service account JSON
        from GOOGLE_CREDENTIALS_B64 env var.
        """
        if not GOOGLE_CREDENTIALS_B64:
            raise RuntimeError("GOOGLE_CREDENTIALS_B64 is not set")

        creds_json = base64.b64decode(GOOGLE_CREDENTIALS_B64).decode("utf-8")
        creds_dict = json.loads(creds_json)
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        return gspread.authorize(creds)

    def get_data() -> Dict[str, str]:
        """
        Read key-value pairs from the '–°–≤–æ–¥–∫–∞' sheet and return as a dict.
        """
        try:
            client = get_gspread_client()
            sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–°–≤–æ–¥–∫–∞")
            rows = sheet.get_all_values()
            return {row[0].strip(): row[1].strip() for row in rows if len(row) >= 2}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}

    # -----------------------------
    # Keyboards
    # -----------------------------
    def persistent_menu_keyboard() -> ReplyKeyboardMarkup:
        """Static reply keyboard with '–ú–µ–Ω—é' button under the input field."""
        return ReplyKeyboardMarkup(
            keyboard=[["–ú–µ–Ω—é"]],
            resize_keyboard=True,
            one_time_keyboard=False,
        )

    def cancel_keyboard() -> InlineKeyboardMarkup:
        """Single inline '–û—Ç–º–µ–Ω–∞' button."""
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )

    # -----------------------------
    # Commands & Handlers
    # -----------------------------
    async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Show main inline menu and also add '–ú–µ–Ω—é' keyboard below the input.
        Works for both /menu command and when invoked from callbacks.
        """
        inline_keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
                [
                    InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="add_income"),
                    InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="add_expense"),
                ],
                [
                    InlineKeyboardButton("üõ° –°—Ç—Ä–∞—Ö–æ–≤–∫–∏", callback_data="insurance"),
                    InlineKeyboardButton("üß∞ –¢–µ—Ö.–û—Å–º–æ—Ç—Ä—ã", callback_data="tech"),
                ],
                [
                    InlineKeyboardButton("üìà –û—Ç—á—ë—Ç 7 –¥–Ω–µ–π", callback_data="report_7"),
                    InlineKeyboardButton("üìä –û—Ç—á—ë—Ç 30 –¥–Ω–µ–π", callback_data="report_30"),
                ],
            ]
        )
        reply_kb = persistent_menu_keyboard()

        if update.message:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)
            # Just show the reply keyboard as a separate message (empty text)
            await update.message.reply_text("", reply_markup=reply_kb)
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard
            )
            await update.callback_query.message.reply_text("", reply_markup=reply_kb)

    async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle all inline button callbacks (callback_data).
        """
        query = update.callback_query
        await query.answer()
        data = query.data

        # Universal cancel & back to menu
        if data in {"cancel", "menu"}:
            context.user_data.clear()
            await menu_command(update, context)
            return

        # ---- Add Income (category selection then amount) ----
        if data == "add_income":
            context.user_data.clear()
            context.user_data["action"] = "income_category"
            keyboard = InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("Franky", callback_data="cat_franky")],
                    [InlineKeyboardButton("Fraiz", callback_data="cat_fraiz")],
                    [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="cat_other")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
                ]
            )
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=keyboard)
            return

        if data in {"cat_franky", "cat_fraiz", "cat_other"}:
            category_map = {
                "cat_franky": "Franky",
                "cat_fraiz": "Fraiz",
                "cat_other": "–î—Ä—É–≥–æ–µ",
            }
            context.user_data["action"] = "income"
            context.user_data["category"] = category_map[data]
            context.user_data["step"] = "amount"
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:", reply_markup=cancel_keyboard()
            )
            return

        # ---- Add Expense ----
        if data == "add_expense":
            context.user_data.clear()
            context.user_data["action"] = "expense"
            context.user_data["step"] = "amount"
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=cancel_keyboard()
            )
            return

        # ---- Source selection (card/cash) ----
        if data == "source_card":
            context.user_data["source"] = "–ö–∞—Ä—Ç–∞"
            context.user_data["step"] = "description"
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            return

        if data == "source_cash":
            context.user_data["source"] = "–ù–∞–ª–∏—á–Ω—ã–µ"
            context.user_data["step"] = "description"
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            return

        # ---- Insurance list ----
        if data == "insurance":
            try:
                sheet = get_gspread_client().open_by_key(SPREADSHEET_ID).worksheet("–°—Ç—Ä–∞—Ö–æ–≤–∫–∏")
                rows = sheet.get_all_values()[1:]  # skip header
                if not rows:
                    await query.edit_message_text(
                        "üöó –°—Ç—Ä–∞—Ö–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                        reply_markup=InlineKeyboardMarkup(
                            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]]
                        ),
                    )
                    return

                text = "üöó –°—Ç—Ä–∞—Ö–æ–≤–∫–∏:
"
                today = datetime.datetime.now().date()
                for i, row in enumerate(rows):
                    name = row[0] if len(row) > 0 else ""
                    date_str = row[1] if len(row) > 1 else None
                    days_left = "‚Äî"
                    if date_str:
                        try:
                            deadline = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
                            delta = (deadline - today).days
                            if delta > 0:
                                days_left = f"–æ—Å—Ç–∞–ª–æ—Å—å {delta} –¥–Ω–µ–π"
                            elif delta == 0:
                                days_left = "—Å–µ–≥–æ–¥–Ω—è"
                            else:
                                days_left = f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(delta)} –¥–Ω–µ–π"
                        except ValueError:
                            days_left = "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"
                    text += f"{i+1}. {name} –¥–æ {date_str or '‚Äî'} ({days_left})
"

                keyboard = InlineKeyboardMarkup(
                    [
                        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_insurance")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                    ]
                )
                await query.edit_message_text(text, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ö–æ–≤–æ–∫: {e}")
                await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞–º.")
            return

        # ---- Tech inspections list ----
        if data == "tech":
            try:
                sheet = get_gspread_client().open_by_key(SPREADSHEET_ID).worksheet("–¢–µ—Ö–û—Å–º–æ—Ç—Ä—ã")
                rows = sheet.get_all_values()[1:]
                if not rows:
                    await query.edit_message_text(
                        "üß∞ –¢–µ—Ö.–û—Å–º–æ—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                        reply_markup=InlineKeyboardMarkup(
                            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]]
                        ),
                    )
                    return

                text = "üß∞ –¢–µ—Ö.–û—Å–º–æ—Ç—Ä—ã:
"
                today = datetime.datetime.now().date()
                for i, row in enumerate(rows):
                    name = row[0] if len(row) > 0 else ""
                    date_str = row[1] if len(row) > 1 else None
                    days_left = "‚Äî"
                    if date_str:
                        try:
                            deadline = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
                            delta = (deadline - today).days
                            if delta > 0:
                                days_left = f"–æ—Å—Ç–∞–ª–æ—Å—å {delta} –¥–Ω–µ–π"
                            elif delta == 0:
                                days_left = "—Å–µ–≥–æ–¥–Ω—è"
                            else:
                                days_left = f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(delta)} –¥–Ω–µ–π"
                        except ValueError:
                            days_left = "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"
                    text += f"{i+1}. {name} –¥–æ {date_str or '‚Äî'} ({days_left})
"

                keyboard = InlineKeyboardMarkup(
                    [
                        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_tech")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                    ]
                )
                await query.edit_message_text(text, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä–æ–≤: {e}")
                await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä–∞–º.")
            return

        # ---- Edit single date (insurance/tech) ----
        if data == "edit_insurance":
            context.user_data["edit_type"] = "insurance"
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ (–ü—Ä–∏–º–µ—Ä: Toyota - 01.09.2025)",
                reply_markup=cancel_keyboard(),
            )
            return

        if data == "edit_tech":
            context.user_data["edit_type"] = "tech"
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ (–ü—Ä–∏–º–µ—Ä: BMW - 15.10.2025)",
                reply_markup=cancel_keyboard(),
            )
            return

        # ---- Balance ----
        if data == "balance":
            try:
                summary = get_data()
                text = (
                    f"üíº –ë–∞–ª–∞–Ω—Å: {summary.get('–ë–∞–ª–∞–Ω—Å', '‚Äî')}
"
                    f"üí≥ –ö–∞—Ä—Ç–∞: {summary.get('–ö–∞—Ä—Ç–∞', '‚Äî')}
"
                    f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {summary.get('–ù–∞–ª–∏—á–Ω—ã–µ', '‚Äî')}"
                )
                keyboard = InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="add_income"),
                            InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="add_expense"),
                        ],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                    ]
                )
                await query.edit_message_text(text, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
                await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
            return

        # ---- Reports (7/30) ----
        if data in {"report_7", "report_30"}:
            days = 7 if data == "report_7" else 30
            try:
                client = get_gspread_client()
                now = datetime.datetime.now()
                start_date = now - datetime.timedelta(days=days)

                def get_sum(sheet_name: str, is_income: bool) -> float:
                    sheet = client.open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
                    rows = sheet.get_all_values()[1:]
                    total = 0.0
                    for row in rows:
                        try:
                            date_str = row[0].strip()
                            try:
                                dt = datetime.datetime.strptime(date_str, "%d.%m.%Y %H:%M")
                            except ValueError:
                                dt = datetime.datetime.strptime(date_str, "%d.%m.%Y")
                            if dt >= start_date:
                                if is_income:
                                    card = row[2] if len(row) > 2 else ""
                                    cash = row[3] if len(row) > 3 else ""
                                else:
                                    card = row[1] if len(row) > 1 else ""
                                    cash = row[2] if len(row) > 2 else ""
                                amount_str = (card or cash or "0").replace(" ", "").replace(",", ".")
                                amount = float(amount_str) if amount_str else 0.0
                                total += amount
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–∫–∏: {row} ‚Äî {e}")
                            continue
                    return total

                income_total = get_sum("–î–æ—Ö–æ–¥", True)
                expense_total = get_sum("–†–∞—Å—Ö–æ–¥", False)
                net_income = income_total - expense_total

                text = (
                    f"üìÖ –û—Ç—á—ë—Ç –∑–∞ {days} –¥–Ω–µ–π:

"
                    f"üì• –î–æ—Ö–æ–¥: {income_total:,.2f}
"
                    f"üì§ –†–∞—Å—Ö–æ–¥: {expense_total:,.2f}
"
                    f"üí∞ –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥: {net_income:,.2f}"
                )

                keyboard = InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                "üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                                callback_data=f"report_{days}_details_page0",
                            )
                        ],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                    ]
                )
                await query.edit_message_text(text, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
                await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç.")
            return

        # ---- Report details navigation ----
        if re.match(r"report_(7|30)_details_page(\d+)", data):
            m = re.match(r"report_(7|30)_details_page(\d+)", data)
            days = int(m.group(1))
            page = int(m.group(2))
            context.user_data["report_days"] = days
            context.user_data["report_page"] = page

            keyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "üì• –î–æ—Ö–æ–¥—ã", callback_data=f"report_{days}_details_income_page{page}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            "üì§ –†–∞—Å—Ö–æ–¥—ã",
                            callback_data=f"report_{days}_details_expense_page{page}",
                        )
                    ],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"report_{days}")],
                ]
            )
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)
            return

        if re.match(r"report_(7|30)_details_(income|expense)_page(\d+)", data):
            m = re.match(r"report_(7|30)_details_(income|expense)_page(\d+)", data)
            days = int(m.group(1))
            detail_type = m.group(2)
            page = int(m.group(3))

            try:
                client = get_gspread_client()
                now = datetime.datetime.now()
                start_date = now - datetime.timedelta(days=days)

                sheet_name = "–î–æ—Ö–æ–¥" if detail_type == "income" else "–†–∞—Å—Ö–æ–¥"
                sheet = client.open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
                rows = sheet.get_all_values()[1:]
                filtered: List[List[str]] = []
                for row in rows:
                    try:
                        try:
                            dt = datetime.datetime.strptime(row[0].strip(), "%d.%m.%Y %H:%M")
                        except ValueError:
                            dt = datetime.datetime.strptime(row[0].strip(), "%d.%m.%Y")
                        if dt >= start_date:
                            filtered.append(row)
                    except Exception:
                        continue

                page_size = 10
                total_pages = (len(filtered) + page_size - 1) // page_size
                page = max(0, min(page, total_pages - 1)) if total_pages > 0 else 0
                page_rows = filtered[page * page_size : (page + 1) * page_size]

                lines: List[str] = []
                for r in page_rows:
                    date = r[0] if len(r) > 0 else "-"
                    if detail_type == "income":
                        category = r[1] if len(r) > 1 else "-"
                        card = r[2] if len(r) > 2 else ""
                        cash = r[3] if len(r) > 3 else ""
                        desc = r[4] if len(r) > 4 else "-"
                        if card:
                            amount = card
                            source_emoji = "üí≥"
                        elif cash:
                            amount = cash
                            source_emoji = "üíµ"
                        else:
                            amount = "0"
                            source_emoji = ""
                        amount = amount.replace(" ", "").replace(",", ".")
                        category_icon = "üõ†Ô∏è" if category.strip().lower() == "–¥—Ä—É–≥–æ–µ" else "üöó"
                        lines.append(
                            f"üìÖ {date} | {category_icon} {category} | üü¢ {source_emoji} {amount} | üìù {desc}"
                        )
                    else:
                        card = r[1] if len(r) > 1 else ""
                        cash = r[2] if len(r) > 2 else ""
                        desc = r[3] if len(r) > 3 else "-"
                        if card:
                            amount = card
                            source_emoji = "üí≥"
                        elif cash:
                            amount = cash
                            source_emoji = "üíµ"
                        else:
                            amount = "0"
                            source_emoji = ""
                        amount = amount.replace(" ", "").replace(",", ".")
                        lines.append(f"üìÖ {date} | üî¥ {source_emoji} -{amount} | üìù {desc}")

                header = "–î–æ—Ö–æ–¥–æ–≤" if detail_type == "income" else "–†–∞—Å—Ö–æ–¥–æ–≤"
                text = f"üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ({header}) –∑–∞ {days} –¥–Ω–µ–π:

"
                text += "
".join(lines) if lines else "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

                buttons: List[InlineKeyboardButton] = []
                if page > 0:
                    buttons.append(
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                            callback_data=f"report_{days}_details_{detail_type}_page{page-1}",
                        )
                    )
                if page < total_pages - 1:
                    buttons.append(
                        InlineKeyboardButton(
                            "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
                            callback_data=f"report_{days}_details_{detail_type}_page{page+1}",
                        )
                    )

                keyboard = InlineKeyboardMarkup(
                    [
                        buttons if buttons else [InlineKeyboardButton("‚Äî", callback_data="menu")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"report_{days}_details_page0")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
                    ]
                )
                await query.edit_message_text(text, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ—Ç—á—ë—Ç–∞: {e}")
                await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞.")
            return

    async def on_menu_button_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle '–ú–µ–Ω—é' from the persistent reply keyboard. Open main menu.
        """
        await menu_command(update, context)

    async def handle_amount_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle user text input during multi-step flows:
        - Amount input
        - Description input
        - Edit insurance/tech dates
        """
        if not update.message:
            return

        text = update.message.text.strip()

        # Allow user to cancel by typing '–æ—Ç–º–µ–Ω–∞'
        if text.lower() == "–æ—Ç–º–µ–Ω–∞":
            context.user_data.clear()
            await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
            await menu_command(update, context)
            return

        # Process edit date flow
        if "edit_type" in context.user_data:
            edit_type = context.user_data.pop("edit_type")
            try:
                name, new_date = map(str.strip, text.split("-", 1))
                if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", new_date):
                    await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")
                    return

                sheet_name = "–°—Ç—Ä–∞—Ö–æ–≤–∫–∏" if edit_type == "insurance" else "–¢–µ—Ö–û—Å–º–æ—Ç—Ä—ã"
                sheet = get_gspread_client().open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
                rows = sheet.get_all_values()

                # Find row by name (case-insensitive) and update date in column B (2)
                for i, row in enumerate(rows, start=1):
                    if row and row[0].strip().lower() == name.lower():
                        sheet.update_cell(i, 2, new_date)
                        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]])
                        await update.message.reply_text(
                            f"‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n{name} ‚Äî {new_date}",
                            reply_markup=keyboard,
                        )
                        return

                await update.message.reply_text("üö´ –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        # Multi-step add income/expense flow
        action = context.user_data.get("action")
        step = context.user_data.get("step")
        if not action or not step:
            return

        if step == "amount":
            try:
                amount = float(text.replace(",", ".").replace(" ", ""))
                if amount <= 0:
                    raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                context.user_data["amount"] = amount
                context.user_data["step"] = "source"
                keyboard = InlineKeyboardMarkup(
                    [
                        [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞", callback_data="source_card")],
                        [InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="source_cash")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
                    ]
                )
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=keyboard)
            except ValueError:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–ø—Ä–∏–º–µ—Ä: 1200.50)")
            return

        if step == "description":
            description = text
            now_str = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
            amount = context.user_data.get("amount")
            category = context.user_data.get("category", "-")
            source = context.user_data.get("source", "-")

            try:
                client = get_gspread_client()

                if action == "income":
                    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–î–æ—Ö–æ–¥")
                    row = [now_str, category, "", "", description]  # C=card, D=cash
                    if source == "–ö–∞—Ä—Ç–∞":
                        row[2] = amount  # C
                    else:
                        row[3] = amount  # D
                    sheet.append_row(row)

                    text_msg = (
                        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ *–î–æ—Ö–æ–¥*:\n"
                        f"üìÖ {now_str}\n"
                        f"üè∑ {category}\n"
                        f"üí∞ {amount} ({source})\n"
                        f"üìù {description}"
                    )
                else:
                    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–†–∞—Å—Ö–æ–¥")
                    row = [now_str, "", "", description]  # B=card, C=cash
                    if source == "–ö–∞—Ä—Ç–∞":
                        row[1] = amount  # B
                    else:
                        row[2] = amount  # C
                    sheet.append_row(row)

                    text_msg = (
                        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ *–†–∞—Å—Ö–æ–¥*:\n"
                        f"üìÖ {now_str}\n"
                        f"üí∏ -{amount} ({source})\n"
                        f"üìù {description}"
                    )

                summary = get_data()
                text_msg += (
                    f"\n\nüìä –ë–∞–ª–∞–Ω—Å:\n"
                    f"üíº {summary.get('–ë–∞–ª–∞–Ω—Å', '‚Äî')}\n"
                    f"üí≥ {summary.get('–ö–∞—Ä—Ç–∞', '‚Äî')}\n"
                    f"üíµ {summary.get('–ù–∞–ª–∏—á–Ω—ã–µ', '‚Äî')}"
                )

                keyboard = InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="add_income"),
                            InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="add_expense"),
                        ],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                    ]
                )

                context.user_data.clear()
                await update.message.reply_text(text_msg, reply_markup=keyboard, parse_mode="Markdown")

                # Duplicate message to group
                try:
                    await context.bot.send_message(
                        chat_id=REMINDER_CHAT_ID, text=text_msg, parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")

    # -----------------------------
    # Reminders background task
    # -----------------------------
    async def check_reminders(app) -> None:
        """
        Periodically (every 24h) check '–°—Ç—Ä–∞—Ö–æ–≤–∫–∏' and '–¢–µ—Ö–û—Å–º–æ—Ç—Ä—ã' for items
        whose deadlines are within 7 days or overdue, and post notifications
        to REMINDER_CHAT_ID.
        """
        while True:
            try:
                client = get_gspread_client()
                now = datetime.datetime.now().date()
                remind_before_days = 7

                def collect(sheet_name: str) -> List[Tuple[str, datetime.date, int]]:
                    sheet = client.open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
                    rows = sheet.get_all_values()[1:]  # skip header
                    reminders: List[Tuple[str, datetime.date, int]] = []
                    for row in rows:
                        if len(row) < 2:
                            continue
                        car = row[0].strip()
                        date_str = row[1].strip()
                        try:
                            try:
                                dt = datetime.datetime.strptime(date_str, "%d.%m.%Y %H:%M").date()
                            except ValueError:
                                dt = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
                        except Exception:
                            continue
                        days_left = (dt - now).days
                        if days_left <= remind_before_days:
                            reminders.append((car, dt, days_left))
                    return reminders

                insurance_reminders = collect("–°—Ç—Ä–∞—Ö–æ–≤–∫–∏")
                tech_reminders = collect("–¢–µ—Ö–û—Å–º–æ—Ç—Ä—ã")

                for car, dt, days_left in insurance_reminders:
                    if days_left < 0:
                        text = f"üö® –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ *{car}* –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞! –°—Ä–æ—á–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É."
                    else:
                        text = f"‚è∞ –ß–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ *{car}* ({dt.strftime('%d.%m.%Y')})."
                    await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=text, parse_mode="Markdown")

                for car, dt, days_left in tech_reminders:
                    if days_left < 0:
                        text = f"üö® –¢–µ—Ö.–æ—Å–º–æ—Ç—Ä –Ω–∞ *{car}* –ø—Ä–æ—Å—Ä–æ—á–µ–Ω! –°—Ä–æ—á–Ω–æ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É."
                    else:
                        text = f"‚è∞ –ß–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä –Ω–∞ *{car}* ({dt.strftime('%d.%m.%Y')})."
                    await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=text, parse_mode="Markdown")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

            await asyncio.sleep(86400)  # 24h

    async def on_startup(app) -> None:
        asyncio.create_task(check_reminders(app))

    def main() -> None:
        if not TELEGRAM_TOKEN:
            raise RuntimeError("Telegram_Token is not set")

        application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

        # Commands & callbacks
        application.add_handler(CommandHandler("menu", menu_command))
        application.add_handler(CallbackQueryHandler(handle_button))
        application.add_handler(MessageHandler(filters.Regex(r"^(–ú–µ–Ω—é)$"), on_menu_button_pressed))

        # Text handler for amounts/descriptions and edit flows
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount_description))

        # Start background reminders after the bot is initialized
        application.post_init = on_startup

        # Run bot
        application.run_polling()

    if __name__ == "__main__":
        main()
