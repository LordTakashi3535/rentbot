import os
import json
import base64
import logging
import gspread
import asyncio
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, Bot
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("Telegram_Token")
GOOGLE_CREDENTIALS_B64 = os.getenv("GOOGLE_CREDENTIALS_B64")
SPREADSHEET_ID = "1qjVJZUqm1hT5IkrASq-_iL9cc4wDl8fdjvd7KDMWL-U"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
def get_gspread_client():
    creds_json = base64.b64decode(GOOGLE_CREDENTIALS_B64).decode("utf-8")
    creds_dict = json.loads(creds_json)
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)

# –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –º–µ–Ω—é
def get_menu_text():
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        rows = sheet.get_all_values()
        data = {row[0].strip(): row[1].strip() for row in rows if len(row) >= 2}

        return (
            f"üìä *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç:*\n"
            f"üîπ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {data.get('–ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞', '‚Äî')}\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {data.get('–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', '‚Äî')}\n"
            f"üìà –î–æ—Ö–æ–¥: {data.get('–î–æ—Ö–æ–¥', '‚Äî')}\n"
            f"üìâ –†–∞—Å—Ö–æ–¥: {data.get('–†–∞—Å—Ö–æ–¥', '‚Äî')}\n"
            f"üíº –ë–∞–ª–∞–Ω—Å: {data.get('–ë–∞–ª–∞–Ω—Å', '‚Äî')}\n"
            f"üí≥ –ö–∞—Ä—Ç–∞: {data.get('–ö–∞—Ä—Ç–∞', '‚Äî')}\n"
            f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {data.get('–ù–∞–ª–∏—á–Ω—ã–µ', '‚Äî')}"
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã."

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
async def auto_update_menu(bot: Bot, chat_id: int, message_id: int):
    while True:
        try:
            text = get_menu_text()
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                parse_mode=ParseMode.MARKDOWN,
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é: {e}")
        await asyncio.sleep(5)

# –ö–æ–º–∞–Ω–¥–∞ /start –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–Ω—é –∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = get_menu_text()
    message = await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

    chat_id = message.chat_id
    message_id = message.message_id

    asyncio.create_task(auto_update_menu(context.bot, chat_id, message_id))

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
def main():
    if not TELEGRAM_TOKEN:
        raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è Telegram_Token –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
