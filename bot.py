import os
import json
import base64
import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
import datetime

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
Telegram_Token = os.getenv("Telegram_Token")
GOOGLE_CREDENTIALS_B64 = os.getenv("GOOGLE_CREDENTIALS_B64")
SPREADSHEET_ID = "1qjVJZUqm1hT5IkrASq-_iL9cc4wDl8fdjvd7KDMWL-U"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
def get_gspread_client():
    creds_json = base64.b64decode(GOOGLE_CREDENTIALS_B64).decode("utf-8")
    creds_dict = json.loads(creds_json)
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
def get_data():
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        rows = sheet.get_all_values()
        return {row[0].strip(): row[1].strip() for row in rows if len(row) >= 2}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

# –ö–æ–º–∞–Ω–¥–∞ /menu
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="add_income")],
        [InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")]
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "add_income":
        context.user_data.clear()
        context.user_data["action"] = "income_category"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("Franky", callback_data="cat_franky")],
            [InlineKeyboardButton("Fraiz", callback_data="cat_fraiz")],
            [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="cat_other")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=keyboard)

    elif query.data in ["cat_franky", "cat_fraiz", "cat_other"]:
        category_map = {
            "cat_franky": "Franky",
            "cat_fraiz": "Fraiz",
            "cat_other": "–î—Ä—É–≥–æ–µ"
        }
        context.user_data["action"] = "income"
        context.user_data["category"] = category_map[query.data]
        context.user_data["step"] = "amount"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")

    elif query.data == "add_expense":
        context.user_data.clear()
        context.user_data["action"] = "expense"
        context.user_data["step"] = "amount"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")

    elif query.data == "balance":
        try:
            data = get_data()
            text = (
                f"üíº –ë–∞–ª–∞–Ω—Å: {data.get('–ë–∞–ª–∞–Ω—Å', '‚Äî')}\n"
                f"üí≥ –ö–∞—Ä—Ç–∞: {data.get('–ö–∞—Ä—Ç–∞', '‚Äî')}\n"
                f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {data.get('–ù–∞–ª–∏—á–Ω—ã–µ', '‚Äî')}"
            )
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
                [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="add_income")],
                [InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")]
            ])
            await query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è
async def handle_amount_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step")
    action = context.user_data.get("action")

    if not action or not step:
        return  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞

    text = update.message.text.strip()

    if step == "amount":
        try:
            amount = float(text.replace(",", "."))
            context.user_data["amount"] = amount
            context.user_data["step"] = "description"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.00")

    elif step == "description":
        description = text
        now = datetime.datetime.now().strftime("%d.%m.%Y")
        amount = context.user_data.get("amount")
        category = context.user_data.get("category", "-")

        try:
            client = get_gspread_client()
            if action == "income":
                sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–î–æ—Ö–æ–¥")
                sheet.append_row([now, category, amount, description])
                reply_text = (
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ *–î–æ—Ö–æ–¥*:\n\n"
                    f"üìÖ –î–∞—Ç–∞: `{now}`\n"
                    f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{category}`\n"
                    f"üí∞ –°—É–º–º–∞: `{amount}`\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: `{description}`"
                )
            else:  # expense
                sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–†–∞—Å—Ö–æ–¥")
                sheet.append_row([now, amount, description])
                reply_text = (
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ *–†–∞—Å—Ö–æ–¥*:\n\n"
                    f"üìÖ –î–∞—Ç–∞: `{now}`\n"
                    f"üí∏ –°—É–º–º–∞: `-{amount}`\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: `{description}`"
                )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –ª–∏—Å—Ç–∞ "–°–≤–æ–¥–∫–∞"
            summary_sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–°–≤–æ–¥–∫–∞")
            summary_data = summary_sheet.get_all_values()
            summary_dict = {row[0].strip(): row[1].strip() for row in summary_data if len(row) >= 2}

            balance_text = (
                f"\n\nüìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
                f"üíº –ë–∞–ª–∞–Ω—Å: {summary_dict.get('–ë–∞–ª–∞–Ω—Å', '‚Äî')}\n"
                f"üí≥ –ö–∞—Ä—Ç–∞: {summary_dict.get('–ö–∞—Ä—Ç–∞', '‚Äî')}\n"
                f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {summary_dict.get('–ù–∞–ª–∏—á–Ω—ã–µ', '‚Äî')}"
            )

            reply_text += balance_text

            # –ö–Ω–æ–ø–∫–∏ "–î–æ—Ö–æ–¥" –∏ "–†–∞—Å—Ö–æ–¥"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="add_income")],
                [InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")]
            ])

            await update.message.reply_text(reply_text, parse_mode="Markdown", reply_markup=keyboard)
            context.user_data.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    if not Telegram_Token or not GOOGLE_CREDENTIALS_B64:
        raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    app = ApplicationBuilder().token(Telegram_Token).build()
    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_amount_description))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
