import os
import json
import base64
import logging
import gspread
import datetime
import re
import asyncio

def _ensure_column(ws, header_name: str) -> int:
    """–í–µ—Ä–Ω—ë—Ç –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é —Å–ø—Ä–∞–≤–∞ –∏ –≤–µ—Ä–Ω—ë—Ç –µ—ë –∏–Ω–¥–µ–∫—Å."""
    header = ws.row_values(1)
    if header_name in header:
        return header.index(header_name) + 1
    col = len(header) + 1
    ws.update_cell(1, col, header_name)
    return col

def _find_row_by_name(ws, name: str, name_header: str = "–ù–∞–∑–≤–∞–Ω–∏–µ") -> int | None:
    """–í–µ—Ä–Ω—ë—Ç –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ (2..N) –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∞–≤—Ç–æ, –∏–Ω–∞—á–µ None."""
    rows = ws.get_all_values()
    if not rows:
        return None
    header = rows[0]
    try:
        name_idx = header.index(name_header)
    except ValueError:
        return None
    for i, r in enumerate(rows[1:], start=2):
        if name_idx < len(r) and r[name_idx].strip() == name.strip():
            return i
    return None
def _format_date_with_days(date_str: str) -> str:
    """
    "–î–î.–ú–ú.–ì–ì–ì–ì" –∏–ª–∏ "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú" -> "–î–î.–ú–ú.–ì–ì–ì–ì (N –¥–Ω–µ–π)"
    –ü—É—Å—Ç–æ -> "‚Äî", –æ—à–∏–±–∫–∏ -> "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç".
    """
    if not date_str:
        return "‚Äî"
    s = date_str.strip()
    try:
        try:
            dt = datetime.datetime.strptime(s, "%d.%m.%Y %H:%M")
        except ValueError:
            dt = datetime.datetime.strptime(s, "%d.%m.%Y")
        d = dt.date()
        today = datetime.date.today()
        delta = (d - today).days
        if delta > 0:
            tail = f"({delta} –¥–Ω–µ–π)"
        elif delta == 0:
            tail = "(—Å–µ–≥–æ–¥–Ω—è)"
        else:
            tail = f"(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {abs(delta)} –¥–Ω–µ–π)"
        return f"{d.strftime('%d.%m.%Y')} {tail}"
    except Exception:
        return "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"


from decimal import Decimal, ROUND_HALF_UP

from oauth2client.service_account import ServiceAccountCredentials

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

Telegram_Token = os.getenv("Telegram_Token")
REMINDER_CHAT_ID = -1002522776417
GOOGLE_CREDENTIALS_B64 = os.getenv("GOOGLE_CREDENTIALS_B64")
SPREADSHEET_ID = "1qjVJZUqm1hT5IkrASq-_iL9cc4wDl8fdjvd7KDMWL-U"

INITIAL_BALANCE = Decimal("21263.99")  # üèÅ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞


def get_gspread_client():
    creds_json = base64.b64decode(GOOGLE_CREDENTIALS_B64).decode("utf-8")
    creds_dict = json.loads(creds_json)
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)


def get_data():
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–°–≤–æ–¥–∫–∞")
        rows = sheet.get_all_values()
        return {row[0].strip(): row[1].strip() for row in rows if len(row) >= 2}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}


def _to_amount(val):
    s = str(val) if val is not None else "0"
    s = s.replace(" ", "").replace(",", ".")
    try:
        return Decimal(s)
    except Exception:
        return Decimal("0")


def _fmt_amount(val):
    if not isinstance(val, Decimal):
        val = _to_amount(val)
    # format with thousands sep and 2 decimals
    return format(val.quantize(Decimal("0.01")), ",.2f")


def compute_balance(client):
    """
    –§–æ—Ä–º—É–ª—ã —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ª–∏—Å—Ç–µ '–°–≤–æ–¥–∫–∞':
    - –ù–∞–ª–∏—á–Ω—ã–µ = –°–£–ú–ú('–î–æ—Ö–æ–¥'!D) - –°–£–ú–ú('–†–∞—Å—Ö–æ–¥'!C)
    - –ö–∞—Ä—Ç–∞ = INITIAL_BALANCE + –°–£–ú–ú('–î–æ—Ö–æ–¥'!C) - –°–£–ú–ú('–†–∞—Å—Ö–æ–¥'!B)
    - –ë–∞–ª–∞–Ω—Å = –ö–∞—Ä—Ç–∞ + –ù–∞–ª–∏—á–Ω—ã–µ
    """
    income_ws = client.open_by_key(SPREADSHEET_ID).worksheet("–î–æ—Ö–æ–¥")
    expense_ws = client.open_by_key(SPREADSHEET_ID).worksheet("–†–∞—Å—Ö–æ–¥")

    income_rows = income_ws.get_all_values()[1:]
    expense_rows = expense_ws.get_all_values()[1:]

    income_card = Decimal("0")
    income_cash = Decimal("0")
    for r in income_rows:
        if len(r) > 2:
            income_card += _to_amount(r[2])
        if len(r) > 3:
            income_cash += _to_amount(r[3])

    expense_card = Decimal("0")
    expense_cash = Decimal("0")
    for r in expense_rows:
        if len(r) > 1:
            expense_card += _to_amount(r[1])
        if len(r) > 2:
            expense_cash += _to_amount(r[2])

    # –§–æ—Ä–º—É–ª—ã –∫–∞–∫ –≤ –ª–∏—Å—Ç–µ '–°–≤–æ–¥–∫–∞'
    cash_bal_display = income_cash - expense_cash  # = SUM(–î–æ—Ö–æ–¥!D) - SUM(–†–∞—Å—Ö–æ–¥!C)
    card_bal_display = INITIAL_BALANCE + income_card - expense_card  # = INITIAL + SUM(–î–æ—Ö–æ–¥!C) - SUM(–†–∞—Å—Ö–æ–¥!B)
    total_bal = card_bal_display + cash_bal_display  # = –ö–∞—Ä—Ç–∞ + –ù–∞–ª–∏—á–Ω—ã–µ

    return {
        "–ë–∞–ª–∞–Ω—Å": total_bal,
        "–ö–∞—Ä—Ç–∞": card_bal_display,
        "–ù–∞–ª–∏—á–Ω—ã–µ": cash_bal_display,
    }

def compute_summary(client):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞–∫ –Ω–∞ –ª–∏—Å—Ç–µ '–°–≤–æ–¥–∫–∞':
    - –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ (INITIAL_BALANCE)
    - –î–æ—Ö–æ–¥ = SUM(–î–æ—Ö–æ–¥!C:D)
    - –†–∞—Å—Ö–æ–¥ = SUM(–†–∞—Å—Ö–æ–¥!B:C)
    - –ù–∞–ª–∏—á–Ω—ã–µ = SUM(–î–æ—Ö–æ–¥!D) - SUM(–†–∞—Å—Ö–æ–¥!C)
    - –ö–∞—Ä—Ç–∞ = INITIAL_BALANCE + SUM(–î–æ—Ö–æ–¥!C) - SUM(–†–∞—Å—Ö–æ–¥!B)
    - –ë–∞–ª–∞–Ω—Å = –ö–∞—Ä—Ç–∞ + –ù–∞–ª–∏—á–Ω—ã–µ
    - –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ = –î–æ—Ö–æ–¥ - –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
    """
    income_ws = client.open_by_key(SPREADSHEET_ID).worksheet("–î–æ—Ö–æ–¥")
    expense_ws = client.open_by_key(SPREADSHEET_ID).worksheet("–†–∞—Å—Ö–æ–¥")

    income_rows = income_ws.get_all_values()[1:]
    expense_rows = expense_ws.get_all_values()[1:]

    income_card = Decimal("0")
    income_cash = Decimal("0")
    for r in income_rows:
        if len(r) > 2:
            income_card += _to_amount(r[2])
        if len(r) > 3:
            income_cash += _to_amount(r[3])

    expense_card = Decimal("0")
    expense_cash = Decimal("0")
    for r in expense_rows:
        if len(r) > 1:
            expense_card += _to_amount(r[1])
        if len(r) > 2:
            expense_cash += _to_amount(r[2])

    income_total = income_card + income_cash
    expense_total = expense_card + expense_cash

    cash = income_cash - expense_cash
    card = INITIAL_BALANCE + income_card - expense_card
    balance = card + cash
    earned = income_total - INITIAL_BALANCE

    return {
        "–ù–∞—á–∞–ª—å–Ω–∞—è": INITIAL_BALANCE,
        "–î–æ—Ö–æ–¥": income_total,
        "–†–∞—Å—Ö–æ–¥": expense_total,
        "–ù–∞–ª–∏—á–Ω—ã–µ": cash,
        "–ö–∞—Ä—Ç–∞": card,
        "–ë–∞–ª–∞–Ω—Å": balance,
        "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ": earned,
    }
# –°—Ç–∞—Ç–∏—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é" –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
def persistent_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[["–ú–µ–Ω—é"]],
        resize_keyboard=True,
        one_time_keyboard=False,
    )


# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é (inline –∫–Ω–æ–ø–∫–∏) –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inline_keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
            [
                InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="add_income"),
                InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="add_expense"),
            ],
            [
                InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–≤–æ–¥", callback_data="transfer"),
                InlineKeyboardButton("üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏", callback_data="cars")
            ],
            [
                InlineKeyboardButton("üõ° –°—Ç—Ä–∞—Ö–æ–≤–∫–∏", callback_data="insurance"),
                InlineKeyboardButton("üß∞ –¢–µ—Ö.–û—Å–º–æ—Ç—Ä—ã", callback_data="tech"),
            ],
            [
                InlineKeyboardButton("üìà –û—Ç—á—ë—Ç 7 –¥–Ω–µ–π", callback_data="report_7"),
                InlineKeyboardButton("üìä –û—Ç—á—ë—Ç 30 –¥–Ω–µ–π", callback_data="report_30"),
            ],
        ]
    )
    reply_kb = persistent_menu_keyboard()

    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)
        # –ü—Ä–æ—Å—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        await update.message.reply_text("", reply_markup=reply_kb)
    elif update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)
        await update.callback_query.message.reply_text("", reply_markup=reply_kb)


def cancel_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]])


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "cancel" or data == "menu":
        context.user_data.clear()
        await menu_command(update, context)
        return

    if data == "add_income":
        context.user_data.clear()
        context.user_data["action"] = "income_category"
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("Franky", callback_data="cat_franky")],
                [InlineKeyboardButton("Fraiz", callback_data="cat_fraiz")],
                [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="cat_other")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
            ]
        )
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=keyboard)

    elif data == "cars_edit":
        # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—à–∏–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        try:
            client = get_gspread_client()
            ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")
            rows = ws.get_all_values()
            if not rows or len(rows) < 2:
                kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cars")]])
                await query.edit_message_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=kb)
                return

            header, body = rows[0], rows[1:]
            try:
                name_idx = header.index("–ù–∞–∑–≤–∞–Ω–∏–µ")
            except ValueError:
                kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cars")]])
                await query.edit_message_text("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ ¬´–ù–∞–∑–≤–∞–Ω–∏–µ¬ª.", reply_markup=kb)
                return

            # –ö–Ω–æ–ø–∫–∏ –ø–æ –∏–º–µ–Ω–∞–º
            btns = []
            for r in body:
                if name_idx < len(r) and r[name_idx].strip():
                    name = r[name_idx].strip()
                    btns.append([InlineKeyboardButton(name, callback_data=f"editcar_select|{name}")])

            btns.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cars")])
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(btns))
        except Exception as e:
            logger.error(f"cars_edit error: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫.")
        return

    elif data.startswith("editcar_select|"):
        # –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–∞—à–∏–Ω—É ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        name = data.split("|", 1)[1]
        context.user_data["edit_car_name"] = name
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∫–∞", callback_data="editcar_field|insurance")],
            [InlineKeyboardButton("üß∞ –¢–µ—Ö–æ—Å–º–æ—Ç—Ä", callback_data="editcar_field|tech")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data="editcar_delete_confirm")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cars_edit")],
        ])
        await query.edit_message_text(f"üöò {name}\n–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb)
        return

    elif data.startswith("editcar_field|"):
        field = data.split("|", 1)[1]   # insurance | tech
        context.user_data["action"] = "edit_car"
        context.user_data["step"] = f"edit_{field}"
        prompt = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):" if field == "insurance" else "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):"
        await query.edit_message_text(prompt, reply_markup=cancel_keyboard())
        return

    elif data == "editcar_delete_confirm":
        name = context.user_data.get("edit_car_name", "-")
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="editcar_delete_yes")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cars_edit")],
        ])
        await query.edit_message_text(f"–£–¥–∞–ª–∏—Ç—å ¬´{name}¬ª –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?", reply_markup=kb)
        return

    elif data == "editcar_delete_yes":
        try:
            client = get_gspread_client()
            ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")
            row_idx = _find_row_by_name(ws, context.user_data.get("edit_car_name", ""))
            if not row_idx:
                await query.edit_message_text("–ê–≤—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cars_edit")]]))
                return
            ws.delete_rows(row_idx)
            context.user_data.pop("edit_car_name", None)
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="cars")]])
            await query.edit_message_text("‚úÖ –ú–∞—à–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=kb)
        except Exception as e:
            logger.error(f"delete car error: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å.")
        return    

    elif data in ["cat_franky", "cat_fraiz", "cat_other"]:
        category_map = {
            "cat_franky": "Franky",
            "cat_fraiz": "Fraiz",
            "cat_other": "–î—Ä—É–≥–æ–µ",
        }
        context.user_data["action"] = "income"
        context.user_data["category"] = category_map[data]
        context.user_data["step"] = "amount"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:", reply_markup=cancel_keyboard())

    elif data == "add_expense":
        context.user_data.clear()
        context.user_data["action"] = "expense"
        context.user_data["step"] = "amount"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=cancel_keyboard())

    elif data == "source_card":
        context.user_data["source"] = "–ö–∞—Ä—Ç–∞"
        context.user_data["step"] = "description"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")

    elif data == "source_cash":
        context.user_data["source"] = "–ù–∞–ª–∏—á–Ω—ã–µ"
        context.user_data["step"] = "description"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")

    elif data == "transfer":
        # Start transfer flow: ask direction
        context.user_data.clear()
        context.user_data["action"] = "transfer"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ ‚Üí üíµ –° –∫–∞—Ä—Ç—ã –≤ –Ω–∞–ª–∏—á–Ω—ã–µ", callback_data="transfer_card_to_cash")],
            [InlineKeyboardButton("üíµ ‚Üí üí≥ –° –Ω–∞–ª–∏—á–Ω—ã—Ö –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="transfer_cash_to_card")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=kb)

    elif data in ["transfer_card_to_cash", "transfer_cash_to_card"]:
        context.user_data.clear()
        context.user_data["action"] = "transfer"
        context.user_data["direction"] = "card_to_cash" if data == "transfer_card_to_cash" else "cash_to_card"
        context.user_data["step"] = "amount"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=cancel_keyboard())

    elif data == "cars":
        try:
            client = get_gspread_client()
            ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")
            rows = ws.get_all_values()

            if not rows or len(rows) < 2:
                text = "üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª–∏:*\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
            else:
                header = rows[0]
                body = rows[1:]

                # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
                idx = {name.strip(): i for i, name in enumerate(header)}
                def g(row, key):
                    i = idx.get(key)
                    return row[i].strip() if (i is not None and i < len(row)) else ""

                cards = []
                for r in body:
                    name  = g(r, "–ù–∞–∑–≤–∞–Ω–∏–µ") or "-"
                    vin   = g(r, "VIN") or "-"
                    plate = g(r, "–ù–æ–º–µ—Ä") or "-"

                    ins_left  = _format_date_with_days(g(r, "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–æ"))
                    tech_left = _format_date_with_days(g(r, "–¢–û –¥–æ"))

                    card = (
                        f"üöò *{name}*\n"
                        f"üîë _VIN:_ `{vin}`\n"
                        f"üîñ _–ù–æ–º–µ—Ä:_ `{plate}`\n"
                        f"üõ°Ô∏è _–°—Ç—Ä–∞—Ö–æ–≤–∫–∞:_ {ins_left}\n"
                        f"üß∞ _–¢–µ—Ö–æ—Å–º–æ—Ç—Ä:_ {tech_left}"
                    )
                    cards.append(card)

                separator = "‚îÄ" * 35  # ‚Üê –¥–ª–∏–Ω–∞ –ª–∏–Ω–∏–∏ (–ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å)
                text = "üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª–∏:*\n\n" + f"\n{separator}\n".join(cards)


            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="create_car")],
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="cars_edit")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
            ])
            await query.edit_message_text(text, reply_markup=keyboard, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ ¬´–ê–≤—Ç–æ–º–æ–±–∏–ª–∏¬ª.")


    elif data == "create_car":
        # —Å—Ç–∞—Ä—Ç –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ
        context.user_data.clear()
        context.user_data["action"] = "create_car"
        context.user_data["step"] = "car_name"
        try:
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ* (–Ω–∞–ø—Ä–∏–º–µ—Ä: Mazda 3):",
                reply_markup=cancel_keyboard(),
                parse_mode="Markdown",
            )
        except Exception as e:
            # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è ‚Äì –æ—Ç–ø—Ä–∞–≤–∏–º –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            logger.error(f"create_car edit failed: {e}")
            await query.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ* (–Ω–∞–ø—Ä–∏–º–µ—Ä: Mazda 3):",
                reply_markup=cancel_keyboard(),
                parse_mode="Markdown",
            )
        return

    elif data == "insurance":
        try:
            sheet = get_gspread_client().open_by_key(SPREADSHEET_ID).worksheet("–°—Ç—Ä–∞—Ö–æ–≤–∫–∏")
            rows = sheet.get_all_values()[1:]
            if not rows:
                await query.edit_message_text(
                    "üöó –°—Ç—Ä–∞—Ö–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup(
                        [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]]
                    ),
                )
                return

            text = "üöó –°—Ç—Ä–∞—Ö–æ–≤–∫–∏:\n"
            today = datetime.datetime.now().date()
            for i, row in enumerate(rows):
                name = row[0]
                date_str = row[1] if len(row) > 1 else None
                days_left = "‚Äî"
                if date_str:
                    try:
                        deadline = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
                        delta = (deadline - today).days
                        if delta > 0:
                            days_left = f"–æ—Å—Ç–∞–ª–æ—Å—å {delta} –¥–Ω–µ–π"
                        elif delta == 0:
                            days_left = "—Å–µ–≥–æ–¥–Ω—è"
                        else:
                            days_left = f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(delta)} –¥–Ω–µ–π"
                    except ValueError:
                        days_left = "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"
                text += f"{i+1}. {name} –¥–æ {date_str or '‚Äî'} ({days_left})\n"

            keyboard = InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_insurance")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                ]
            )
            await query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ö–æ–≤–æ–∫: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞–º.")

    elif data == "tech":
        try:
            sheet = get_gspread_client().open_by_key(SPREADSHEET_ID).worksheet("–¢–µ—Ö–û—Å–º–æ—Ç—Ä—ã")
            rows = sheet.get_all_values()[1:]
            if not rows:
                await query.edit_message_text(
                    "üß∞ –¢–µ—Ö.–û—Å–º–æ—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup(
                        [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]]
                    ),
                )
                return

            text = "üß∞ –¢–µ—Ö.–û—Å–º–æ—Ç—Ä—ã:\n"
            today = datetime.datetime.now().date()
            for i, row in enumerate(rows):
                name = row[0]
                date_str = row[1] if len(row) > 1 else None
                days_left = "‚Äî"
                if date_str:
                    try:
                        deadline = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
                        delta = (deadline - today).days
                        if delta > 0:
                            days_left = f"–æ—Å—Ç–∞–ª–æ—Å—å {delta} –¥–Ω–µ–π"
                        elif delta == 0:
                            days_left = "—Å–µ–≥–æ–¥–Ω—è"
                        else:
                            days_left = f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(delta)} –¥–Ω–µ–π"
                    except ValueError:
                        days_left = "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"
                text += f"{i+1}. {name} –¥–æ {date_str or '‚Äî'} ({days_left})\n"

            keyboard = InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_tech")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                ]
            )
            await query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä–æ–≤: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä–∞–º.")

    elif data == "edit_insurance":
        context.user_data["edit_type"] = "insurance"
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ (–ü—Ä–∏–º–µ—Ä: Toyota - 01.09.2025)",
            reply_markup=cancel_keyboard(),
        )

    elif data == "edit_tech":
        context.user_data["edit_type"] = "tech"
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ (–ü—Ä–∏–º–µ—Ä: BMW - 15.10.2025)",
            reply_markup=cancel_keyboard(),
        )

    elif data == "balance":
        try:
            client = get_gspread_client()
            s = compute_summary(client)
            text = (
                f"üèÅ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {_fmt_amount(s['–ù–∞—á–∞–ª—å–Ω–∞—è'])}\n"
                f"üíº –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {_fmt_amount(s['–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ'])}\n"
                f"üí∞ –î–æ—Ö–æ–¥: {_fmt_amount(s['–î–æ—Ö–æ–¥'])}\n"
                f"üí∏ –†–∞—Å—Ö–æ–¥: {_fmt_amount(s['–†–∞—Å—Ö–æ–¥'])}\n"
                f"\n"
                f"üíº –ë–∞–ª–∞–Ω—Å: {_fmt_amount(s['–ë–∞–ª–∞–Ω—Å'])}\n"
                f"üí≥ –ö–∞—Ä—Ç–∞: {_fmt_amount(s['–ö–∞—Ä—Ç–∞'])}\n"
                f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {_fmt_amount(s['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
            )
            keyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="add_income"),
                        InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="add_expense"),
                    ],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                ]
            )
            await query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.")

    # –í handle_button –¥–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö callback_data
    elif data in ["report_7", "report_30"]:
        days = 7 if data == "report_7" else 30
        try:
            client = get_gspread_client()
            now = datetime.datetime.now()
            start_date = now - datetime.timedelta(days=days)

            def get_sum_and_details(sheet_name, is_income):
                sheet = client.open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
                rows = sheet.get_all_values()[1:]
                total = Decimal('0.0')
                for row in rows:
                    try:
                        date_str = row[0].strip()
                        try:
                            dt = datetime.datetime.strptime(date_str, "%d.%m.%Y %H:%M")
                        except ValueError:
                            dt = datetime.datetime.strptime(date_str, "%d.%m.%Y")
                        if dt >= start_date:
                            if is_income:
                                card = row[2] if len(row) > 2 else ""
                                cash = row[3] if len(row) > 3 else ""
                            else:
                                card = row[1] if len(row) > 1 else ""
                                cash = row[2] if len(row) > 2 else ""
                            amount_str = card or cash or "0"
                            amount_str = amount_str.replace(" ", "").replace(",", ".")
                            amount = _to_amount(amount_str)
                            total += amount
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–∫–∏: {row} ‚Äî {e}")
                        continue
                return total

            income_total = get_sum_and_details("–î–æ—Ö–æ–¥", True)
            expense_total = get_sum_and_details("–†–∞—Å—Ö–æ–¥", False)
            net_income = income_total - expense_total

            text = (
                f"üìÖ –û—Ç—á—ë—Ç –∑–∞ {days} –¥–Ω–µ–π:\n\n"
                f"üì• –î–æ—Ö–æ–¥: {_fmt_amount(income_total)}\n"
                f"üì§ –†–∞—Å—Ö–æ–¥: {_fmt_amount(expense_total)}\n"
                f"üí∞ –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥: {_fmt_amount(net_income)}"
            )
            keyboard = InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"report_{days}_details_page0")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                ]
            )
            await query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç.")

    elif re.match(r"report_(7|30)_details_page(\d+)", data):
        m = re.match(r"report_(7|30)_details_page(\d+)", data)
        days = int(m.group(1))
        page = int(m.group(2))

        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å context.user_data, –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        context.user_data["report_days"] = days
        context.user_data["report_page"] = page

        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥—ã", callback_data=f"report_{days}_details_income_page{page}")],
                [InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥—ã", callback_data=f"report_{days}_details_expense_page{page}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"report_{days}")],
            ]
        )
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)

    elif re.match(r"report_(7|30)_details_(income|expense)_page(\d+)", data):
        m = re.match(r"report_(7|30)_details_(income|expense)_page(\d+)", data)
        days, detail_type, page = int(m.group(1)), m.group(2), int(m.group(3))
        try:
            client = get_gspread_client()
            now = datetime.datetime.now()
            start_date = now - datetime.timedelta(days=days)
            sheet_name = "–î–æ—Ö–æ–¥" if detail_type == "income" else "–†–∞—Å—Ö–æ–¥"
            sheet = client.open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
            rows = sheet.get_all_values()[1:]
            filtered = []
            for row in rows:
                try:
                    try:
                        dt = datetime.datetime.strptime(row[0].strip(), "%d.%m.%Y %H:%M")
                    except ValueError:
                        dt = datetime.datetime.strptime(row[0].strip(), "%d.%m.%Y")
                    if dt >= start_date:
                        filtered.append(row)
                except Exception:
                    continue

            page_size = 10
            total_pages = (len(filtered) + page_size - 1) // page_size
            page = max(0, min(page, total_pages - 1))
            page_rows = filtered[page * page_size : (page + 1) * page_size]

            lines = []
            for r in page_rows:
                date = r[0]
                if detail_type == "income":
                    category = r[1] if len(r) > 1 else "-"
                    card = r[2] if len(r) > 2 else ""
                    cash = r[3] if len(r) > 3 else ""
                    desc = r[4] if len(r) > 4 else "-"
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –∏ –∏—Å—Ç–æ—á–Ω–∏–∫
                    if card:
                        amount = card
                        source_emoji = "üí≥"
                    elif cash:
                        amount = cash
                        source_emoji = "üíµ"
                    else:
                        amount = "0"
                        source_emoji = ""
                    amount = _fmt_amount(amount)
                    # –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    category_icon = "üõ†Ô∏è" if category.strip().lower() == "–¥—Ä—É–≥–æ–µ" else "üöó"
                    lines.append(
                        f"üìÖ {date} | {category_icon} {category} | üü¢ {source_emoji} {amount} | üìù {desc}"
                    )
                else:
                    card = r[1] if len(r) > 1 else ""
                    cash = r[2] if len(r) > 2 else ""
                    desc = r[3] if len(r) > 3 else "-"
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –∏ –∏—Å—Ç–æ—á–Ω–∏–∫
                    if card:
                        amount = card
                        source_emoji = "üí≥"
                    elif cash:
                        amount = cash
                        source_emoji = "üíµ"
                    else:
                        amount = "0"
                        source_emoji = ""
                    amount = _fmt_amount(amount)
                    lines.append(f"üìÖ {date} | üî¥ {source_emoji} -{amount} | üìù {desc}")

            text = (
                f"üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ({'–î–æ—Ö–æ–¥–æ–≤' if detail_type == 'income' else '–†–∞—Å—Ö–æ–¥–æ–≤'}) –∑–∞ {days} –¥–Ω–µ–π:\n\n"
            )
            text += "\n".join(lines) if lines else "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

            buttons = []
            if page > 0:
                buttons.append(
                    InlineKeyboardButton(
                        "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                        callback_data=f"report_{days}_details_{detail_type}_page{page-1}",
                    )
                )
            if page < total_pages - 1:
                buttons.append(
                    InlineKeyboardButton(
                        "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
                        callback_data=f"report_{days}_details_{detail_type}_page{page+1}",
                    )
                )

            keyboard = InlineKeyboardMarkup(
                [
                    buttons,
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"report_{days}_details_page0")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
                ]
            )
            await query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ—Ç—á—ë—Ç–∞: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
async def on_menu_button_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await menu_command(update, context)


async def handle_amount_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    # -------- –û—Ç–º–µ–Ω–∞ --------
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        context.user_data.clear()
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
        await menu_command(update, context)
        return

    if context.user_data.get("action") == "edit_car":
        step = context.user_data.get("step")
        name = context.user_data.get("edit_car_name", "")
        date_txt = (update.message.text or "").strip()

        if step in ("edit_insurance", "edit_tech"):
            # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
            try:
                try:
                    d = datetime.datetime.strptime(date_txt, "%d.%m.%Y")
                except ValueError:
                    await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì")
                    return

                client = get_gspread_client()
                ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")

                row_idx = _find_row_by_name(ws, name)
                if not row_idx:
                    await update.message.reply_text("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                header = ws.row_values(1)
                col_name = "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–æ" if step == "edit_insurance" else "–¢–û –¥–æ"
                col_idx = header.index(col_name) + 1 if col_name in header else _ensure_column(ws, col_name)

                ws.update_cell(row_idx, col_idx, date_txt)

                context.user_data.pop("action", None)
                context.user_data.pop("step", None)

                kb = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="cars_edit")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="cars")],
                ])
                await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {col_name} = {date_txt} –¥–ª—è ¬´{name}¬ª.", reply_markup=kb)
            except Exception as e:
                logger.error(f"edit insurance/tech error: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å.")
            return
    # -------- –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏/–¢–û) --------
    if "edit_type" in context.user_data:
        edit_type = context.user_data.pop("edit_type")
        try:
            name, new_date = map(str.strip, text.split("-", 1))
            if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", new_date):
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")
                return

            sheet_name = "–°—Ç—Ä–∞—Ö–æ–≤–∫–∏" if edit_type == "insurance" else "–¢–µ—Ö–û—Å–º–æ—Ç—Ä—ã"
            sheet = get_gspread_client().open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
            rows = sheet.get_all_values()
            for i, row in enumerate(rows):
                if row and row[0].lower() == name.lower():
                    sheet.update_cell(i + 1, 2, new_date)
                    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]])
                    await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n{name} ‚Äî {new_date}", reply_markup=kb)
                    return

            await update.message.reply_text("üö´ –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    action = context.user_data.get("action")
    step = context.user_data.get("step")
    if not action or not step:
        return

    # -------- –®–∞–≥ –≤–≤–æ–¥–∞ —Å—É–º–º—ã --------
    if step == "amount":
        try:
            amount = _to_amount(text)
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

            context.user_data["amount"] = amount

            # ---- –ú–ì–ù–û–í–ï–ù–ù–´–ô –ü–ï–†–ï–í–û–î (–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è) ----
            if action == "transfer":
                description = ""
                direction = context.user_data.get("direction")

                try:
                    client = get_gspread_client()
                    income_ws = client.open_by_key(SPREADSHEET_ID).worksheet("–î–æ—Ö–æ–¥")
                    expense_ws = client.open_by_key(SPREADSHEET_ID).worksheet("–†–∞—Å—Ö–æ–¥")

                    now = datetime.datetime.now().strftime("%d.%m.%Y %H:%–ú")
                    # –î–æ—Ö–æ–¥: [date, category, card(C), cash(D), desc]
                    income_row = [now, "–ü–µ—Ä–µ–≤–æ–¥", "", "", description]
                    # –†–∞—Å—Ö–æ–¥: [date, card(B), cash(C), desc]
                    expense_row = [now, "", "", description]

                    q = str(amount.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP))

                    if direction == "card_to_cash":
                        # —Ä–∞—Å—Ö–æ–¥ –ø–æ –∫–∞—Ä—Ç–µ (B), –¥–æ—Ö–æ–¥ –≤ –Ω–∞–ª–∏—á–Ω—ã–µ (D)
                        expense_row[1] = q  # B
                        income_row[3] = q   # D
                        arrow = "üí≥ ‚Üí üíµ"
                    else:
                        # —Ä–∞—Å—Ö–æ–¥ –ø–æ –Ω–∞–ª–∏—á–Ω—ã–º (C), –¥–æ—Ö–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É (C)
                        expense_row[2] = q  # C
                        income_row[2] = q   # C
                        arrow = "üíµ ‚Üí üí≥"

                    # –ó–∞–ø–∏—Å—å
                    expense_ws.append_row(expense_row, value_input_option="USER_ENTERED", table_range="A:D")
                    income_ws.append_row(income_row, value_input_option="USER_ENTERED", table_range="A:E")

                    # –ë–∞–ª–∞–Ω—Å
                    live = compute_balance(client)

                    # –¢–µ–±–µ ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    text_msg = (
                        f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:\n"
                        f"{arrow}  {amount}\n"
                        f"\nüìä –ë–∞–ª–∞–Ω—Å:\n"
                        f"üíº {_fmt_amount(live['–ë–∞–ª–∞–Ω—Å'])}\n"
                        f"üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])}\n"
                        f"üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
                    )
                    kb = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="add_income"),
                         InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
                    ])
                    context.user_data.clear()
                    await update.message.reply_text(text_msg, reply_markup=kb, parse_mode="Markdown")

                    # –í –∫–∞–Ω–∞–ª ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–æ, –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                    try:
                        group_msg = (
                            f"üîÅ –ü–µ—Ä–µ–≤–æ–¥: {arrow} {_fmt_amount(amount)}\n"
                            f"–ë–∞–ª–∞–Ω—Å: üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])} | üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
                        )
                        await context.bot.send_message(chat_id=REMINDER_CHAT_ID, text=group_msg, parse_mode="Markdown")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.")
                return

            # ---- –î–û–•–û–î/–†–ê–°–•–û–î: –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ----
            context.user_data["step"] = "source"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞", callback_data="source_card")],
                [InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="source_cash")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
            ])
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=keyboard)

        except Exception:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–ø—Ä–∏–º–µ—Ä: 1200.50)")
        return

    # -------- –®–∞–≥ –æ–ø–∏—Å–∞–Ω–∏—è (–¢–û–õ–¨–ö–û –¥–ª—è –¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥) --------
    if step == "description":
        description = text or ""
        now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

        amount = context.user_data.get("amount")
        category = context.user_data.get("category", "-")
        source = context.user_data.get("source", "-")

        try:
            client = get_gspread_client()

            if action == "income":
                sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–î–æ—Ö–æ–¥")
                row = [now, category, "", "", description]
                q = str(amount.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP))
                if source == "–ö–∞—Ä—Ç–∞":
                    row[2] = q  # C
                else:
                    row[3] = q  # D
                sheet.append_row(row, value_input_option="USER_ENTERED", table_range="A:E")

                text_msg = (
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ *–î–æ—Ö–æ–¥*:\n"
                    f"üìÖ {now}\n"
                    f"üè∑ {category}\n"
                    f"üí∞ {amount} ({source})\n"
                    f"üìù {description or '-'}"
                )
            else:
                sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–†–∞—Å—Ö–æ–¥")
                row = [now, "", "", description]
                q = str(amount.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP))
                if source == "–ö–∞—Ä—Ç–∞":
                    row[1] = q  # B
                else:
                    row[2] = q  # C
                sheet.append_row(row, value_input_option="USER_ENTERED", table_range="A:D")

                text_msg = (
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ *–†–∞—Å—Ö–æ–¥*:\n"
                    f"üìÖ {now}\n"
                    f"üí∏ -{amount} ({source})\n"
                    f"üìù {description or '-'}"
                )

            # –ñ–∏–≤–æ–π –±–∞–ª–∞–Ω—Å
            live = compute_balance(client)
            text_msg += (
                f"\n\nüìä –ë–∞–ª–∞–Ω—Å:\n"
                f"üíº {_fmt_amount(live['–ë–∞–ª–∞–Ω—Å'])}\n"
                f"üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])}\n"
                f"üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
            )

            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –î–æ—Ö–æ–¥", callback_data="add_income"),
                 InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
            ])
            context.user_data.clear()
            await update.message.reply_text(text_msg, reply_markup=kb, parse_mode="Markdown")

            # ---- –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª ----
            try:
                source_emoji = "üí≥" if source == "–ö–∞—Ä—Ç–∞" else "üíµ"
                desc_q = f' ‚Äú{description}‚Äù' if description else ""
                if action == "income":
                    # –î–æ—Ö–æ–¥ ‚Äî —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    group_msg = (
                        f"üì• –î–æ—Ö–æ–¥: {source_emoji} +{_fmt_amount(amount)} ‚Äî {category}{desc_q}\n"
                        f"–ë–∞–ª–∞–Ω—Å: üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])} | üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
                    )
                else:
                    # –†–∞—Å—Ö–æ–¥ ‚Äî —Ç–æ–∂–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    group_msg = (
                        f"üì§ –†–∞—Å—Ö–æ–¥: {source_emoji} -{_fmt_amount(amount)}" +
                        (f" ‚Äî {category}" if category and category != "-" else "") +
                        (desc_q) + "\n" +
                        f"–ë–∞–ª–∞–Ω—Å: üí≥ {_fmt_amount(live['–ö–∞—Ä—Ç–∞'])} | üíµ {_fmt_amount(live['–ù–∞–ª–∏—á–Ω—ã–µ'])}"
                    )
                await context.bot.send_message(chat_id=REMINDER_CHAT_ID, text=group_msg, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        return
    # ===== –°–û–ó–î–ê–ù–ò–ï –ê–í–¢–û =====
    if context.user_data.get("action") == "create_car":
        step = context.user_data.get("step")

        # 1) –ù–∞–∑–≤–∞–Ω–∏–µ
        if step == "car_name":
            name = (text or "").strip()
            if not name:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: Mazda 3")
                return
            context.user_data["car_name"] = name
            context.user_data["step"] = "car_vin"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ *VIN* (17 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∞—Ç–∏–Ω–∏—Ü–∞+—Ü–∏—Ñ—Ä—ã):", parse_mode="Markdown")
            return

        # 2) VIN
        if step == "car_vin":
            vin = (text or "").strip().upper().replace(" ", "")
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–¥–ª–∏–Ω–∞ 17 –∏ –±–µ–∑ I/O/Q)
            bad = set("IOQ")
            if len(vin) != 17 or any(ch in bad for ch in vin):
                await update.message.reply_text("‚ö†Ô∏è VIN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 17 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ I/O/Q. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            context.user_data["car_vin"] = vin
            context.user_data["step"] = "car_plate"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ *–≥–æ—Å–Ω–æ–º–µ—Ä* (–∫–∞–∫ –≤ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–µ):", parse_mode="Markdown")
            return

        # 3) –ù–æ–º–µ—Ä (–≥–æ—Å–Ω–æ–º–µ—Ä) -> –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
        if step == "car_plate":
            plate = (text or "").strip().upper()
            if not plate:
                await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä.")
                return
            context.user_data["car_plate"] = plate

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
            try:
                client = get_gspread_client()
                ws = client.open_by_key(SPREADSHEET_ID).worksheet("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏")

                new_id = datetime.datetime.now().strftime("car_%Y%m%d_%H%M%S")
                now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

                row = [
                    new_id,                          # A: ID
                    context.user_data["car_name"],   # B: –ù–∞–∑–≤–∞–Ω–∏–µ
                    context.user_data["car_vin"],    # C: VIN
                    context.user_data["car_plate"],  # D: –ù–æ–º–µ—Ä
                    now,                             # E: –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                ]
                ws.append_row(row, value_input_option="USER_ENTERED", table_range="A:E")

                # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                msg = (
                    "‚úÖ –ê–≤—Ç–æ —Å–æ–∑–¥–∞–Ω–æ:\n"
                    f"ID: {new_id}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {context.user_data['car_name']}\n"
                    f"VIN: {context.user_data['car_vin']}\n"
                    f"–ù–æ–º–µ—Ä: {context.user_data['car_plate']}\n"
                    f"–î–∞—Ç–∞: {now}"
                )
                context.user_data.clear()
                kb = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π", callback_data="cars")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
                ])
                await update.message.reply_text(msg, reply_markup=kb)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—Å—Ç ¬´–ê–≤—Ç–æ–º–æ–±–∏–ª–∏¬ª.")
            return    

async def check_reminders(app):
    while True:
        try:
            client = get_gspread_client()
            now = datetime.datetime.now().date()
            remind_before_days = 7

            def check_sheet(sheet_name):
                sheet = client.open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
                rows = sheet.get_all_values()[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                reminders = []
                for row in rows:
                    if len(row) < 2:
                        continue
                    car = row[0].strip()
                    date_str = row[1].strip()
                    try:
                        try:
                            dt = datetime.datetime.strptime(date_str, "%d.%m.%Y %H:%M").date()
                        except ValueError:
                            dt = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
                    except Exception:
                        continue
                    days_left = (dt - now).days
                    if days_left <= remind_before_days:
                        reminders.append((car, dt, days_left))
                return reminders

            insurance_reminders = check_sheet("–°—Ç—Ä–∞—Ö–æ–≤–∫–∏")
            tech_reminders = check_sheet("–¢–µ—Ö–û—Å–º–æ—Ç—Ä—ã")

            for car, dt, days_left in insurance_reminders:
                if days_left < 0:
                    text = f"üö® –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ *{car}* –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞! –°—Ä–æ—á–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É."
                else:
                    text = f"‚è∞ –ß–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ *{car}* ({dt.strftime('%d.%m.%Y')})."
                await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=text, parse_mode="Markdown")

            for car, dt, days_left in tech_reminders:
                if days_left < 0:
                    text = f"üö® –¢–µ—Ö.–æ—Å–º–æ—Ç—Ä –Ω–∞ *{car}* –ø—Ä–æ—Å—Ä–æ—á–µ–Ω! –°—Ä–æ—á–Ω–æ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É."
                else:
                    text = f"‚è∞ –ß–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–µ—Ö.–æ—Å–º–æ—Ç—Ä –Ω–∞ *{car}* ({dt.strftime('%d.%m.%Y')})."
                await app.bot.send_message(chat_id=REMINDER_CHAT_ID, text=text, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

        await asyncio.sleep(86400)  # –ñ–¥–µ–º 24 —á–∞—Å–∞


async def on_startup(app):
    asyncio.create_task(check_reminders(app))


def main():
    application = ApplicationBuilder().token(Telegram_Token).build()
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CallbackQueryHandler(handle_button))
    application.add_handler(MessageHandler(filters.Regex("^(–ú–µ–Ω—é)$"), on_menu_button_pressed))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount_description))
    application.post_init = on_startup
    application.run_polling()


if __name__ == "__main__":
    main()
