import os
import json
import base64
import logging
import asyncio
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("Telegram_Token")
GOOGLE_CREDENTIALS_B64 = os.getenv("GOOGLE_CREDENTIALS_B64")
SPREADSHEET_ID = "1qjVJZUqm1hT5IkrASq-_iL9cc4wDl8fdjvd7KDMWL-U"

def get_gspread_client():
    if not GOOGLE_CREDENTIALS_B64:
        raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS_B64 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    creds_json = base64.b64decode(GOOGLE_CREDENTIALS_B64).decode("utf-8")
    creds_dict = json.loads(creds_json)

    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)

def fetch_menu_data():
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        data = sheet.get_all_records()
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        # [{"–ü–∞—Ä–∞–º–µ—Ç—Ä": "–ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ": "10000"}, ...]
        # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑—å–º—ë–º –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å—Ç—Ä–æ–∫.

        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–¥–æ–≥–Ω–∞—Ç—å –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü—ã

        start_sum = data[0].get("–ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞", "0")
        earned = data[0].get("–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ", "0")
        income = data[0].get("–î–æ—Ö–æ–¥", "0")
        expense = data[0].get("–†–∞—Å—Ö–æ–¥", "0")
        balance = data[0].get("–ë–∞–ª–∞–Ω—Å", "0")
        card = data[0].get("–ö–∞—Ä—Ç–∞", "0")
        cash = data[0].get("–ù–∞–ª–∏—á–Ω—ã–µ", "0")

        menu_text = (
            f"üìä *–°—Ç–∞—Ç—É—Å –§–∏–Ω–∞–Ω—Å–æ–≤:*\n"
            f"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {start_sum}\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned}\n"
            f"–î–æ—Ö–æ–¥: {income}\n"
            f"–†–∞—Å—Ö–æ–¥: {expense}\n"
            f"–ë–∞–ª–∞–Ω—Å: {balance}\n"
            f"–ö–∞—Ä—Ç–∞: {card}\n"
            f"–ù–∞–ª–∏—á–Ω—ã–µ: {cash}\n"
        )
        return menu_text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google Sheets: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets."

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –º–µ–Ω—é
async def start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    menu_text = fetch_menu_data()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_message = await update.message.reply_text(menu_text, parse_mode="Markdown")
    message_id = sent_message.message_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ message_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –≤ –ø–∞–º—è—Ç–∏, –∏–ª–∏ –±–∞–∑–µ)
    context.chat_data["menu_message_id"] = message_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫)
    async def update_loop():
        while True:
            await asyncio.sleep(60)
            new_text = fetch_menu_data()
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=new_text,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é: {e}")
                # –ú–æ–∂–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª—è—Ç—å –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
                break

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    context.application.create_task(update_loop())

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        data = sheet.get_all_values()
        preview = "\n".join([", ".join(row) for row in data[:10]]) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        await update.message.reply_text(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ:\n{preview}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ Google Sheets")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞:\n{e}")

def main():
    if not TELEGRAM_TOKEN:
        raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è Telegram_Token –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("test", test_command))
    app.add_handler(CommandHandler("menu", start_menu))  # –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω—é

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
